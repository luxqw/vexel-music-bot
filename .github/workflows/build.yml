name: Main Docker Image CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: luxqw
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Debug Info
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Owner: ${{ github.repository_owner }}"
          echo "Repo name: ${{ github.event.repository.name }}"

      - name: Create and Push New Version Tag
        id: version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n1)

          if [[ -z "$latest_tag" ]]; then
            new_version="v1.0.0"
          else
            version_number="${latest_tag#v}"
            IFS='.' read -r major minor patch <<<"$version_number"
            patch=$((patch+1))
            new_version="v$major.$minor.$patch"
          fi
          
          echo "New version: $new_version"
          
          git tag "$new_version"
          git push origin "$new_version"
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.new_version }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Notify Discord of Build Status
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
          BUILD_STATUS: ${{ job.status }}
        run: |
          if [[ "$BUILD_STATUS" == "success" ]]; then
            TITLE="🚀 Production Build Successful!"
            COLOR=3066993
          else
            TITLE="💥 Production Build Failed!"
            COLOR=16711680
          fi

          COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | head -n1 | sed 's/"/\\"/g' | sed "s/'/\\\'/g")
          SHORT_SHA=${GITHUB_SHA:0:7}
          
          curl -H "Content-Type: application/json" -d @- "$DISCORD_WEBHOOK_URL" <<EOF
          {
            "embeds": [{
              "title": "$TITLE",
              "description": "**Branch:** \`main\`\n**Tag:** \`${{ steps.version.outputs.new_version }}\`\n**Commit:** [\`${SHORT_SHA}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\n**Message:** ${COMMIT_MSG}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": $COLOR,
              "fields": [
                {
                  "name": "🐳 Docker Images",
                  "value": "ghcr.io/${{ github.repository }}:${{ steps.version.outputs.new_version }}\nghcr.io/${{ github.repository }}:latest\nghcr.io/${{ github.repository }}:sha-${SHORT_SHA}"
                }
              ],
              "footer": {
                "text": "Production Environment • GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF
