# A more descriptive name for the main branch CI
name: Main Docker Image CI

on:
  push:
    branches: [ main ] # Triggered on pushes to the main branch
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to push git tags
      packages: write # Needed to push docker images to GHCR
      actions: read   # Needed for checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Docker login
        run: |
          echo "Verifying Docker login..."
          docker info
          echo "Attempting to check GHCR access..."
          
      - name: Create and Push New Version Tag
        id: version
        run: |
          # Configure git user
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get the latest tag, filter for standard v*.*.* versions
          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n1)

          # If no tags exist, start from v1.0.0; otherwise, increment the patch version
          if [[ -z "$latest_tag" ]]; then
            new_version="v1.0.0"
          else
            # Strip 'v' prefix, split into parts, and increment patch
            version_number="${latest_tag#v}"
            IFS='.' read -r major minor patch <<<"$version_number"
            patch=$((patch+1))
            new_version="v$major.$minor.$patch"
          fi
          
          echo "New version: $new_version"
          
          # Create and push the new tag
          git tag "$new_version"
          git push origin "$new_version"
          
          # Set the new version as an output for subsequent steps
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Define all tags in one block. Using github.sha_short is a clean way to get the short commit hash.
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.version.outputs.new_version }}
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:sha-${{ github.sha_short }}

      - name: Notify Discord of Build Status
        if: always() # This step runs even if previous steps fail
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
          BUILD_STATUS: ${{ job.status }}
        run: |
          if [[ "$BUILD_STATUS" == "success" ]]; then
            TITLE="🚀 Production Build Successful!"
            COLOR=3066993 # Green
          else
            TITLE="💥 Production Build Failed!"
            COLOR=16711680 # Red
          fi

          # The commit message is escaped to be safely embedded in JSON
          COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | head -n1 | sed 's/"/\\"/g' | sed "s/'/\\\'/g")
          
          # Send a nicely formatted embed to Discord using a heredoc for readability
          curl -H "Content-Type: application/json" -d @- "$DISCORD_WEBHOOK_URL" <<EOF
          {
            "embeds": [{
              "title": "$TITLE",
              "description": "**Branch:** \`main\`\n**Tag:** \`${{ steps.version.outputs.new_version }}\`\n**Commit:** [\`${{ github.sha_short }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\n**Message:** ${COMMIT_MSG}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": $COLOR,
              "fields": [
                {
                  "name": "🐳 Docker Images",
                  "value": "ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.version.outputs.new_version }}\nghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest\nghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:sha-${{ github.sha_short }}"
                }
              ],
              "footer": {
                "text": "Production Environment • GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF
