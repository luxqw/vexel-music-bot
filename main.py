import os
import logging
import discord
import asyncio
import sys
import re
from discord.ext import commands
from discord import app_commands
import yt_dlp

TOKEN = os.getenv("DISCORD_TOKEN")
MAX_PLAYLIST_SIZE = int(os.getenv("MAX_PLAYLIST_SIZE", "15"))
MAX_QUEUE_SIZE = int(os.getenv("MAX_QUEUE_SIZE", "50"))

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree
queues = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–ª–µ–µ—Ä–∞ –ø–æ –≥–∏–ª—å–¥–∏—è–º
player_messages = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
current_tracks = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–ª–µ–µ—Ä–∞
player_channels = {}

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("VexelBot")

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É cookies
def get_ytdl_opts(extract_flat=False):
    """–ü–æ–ª—É—á–∏—Ç—å ytdl_opts —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    ytdl_opts = {
        "format": "bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio/best[height<=720]/best",
        "noplaylist": False,
        "quiet": True,
        "no_warnings": True,
        "ignoreerrors": True,
        "extract_flat": extract_flat,
        "writethumbnail": False,
        "writeinfojson": False,
        "logtostderr": False,
        "extractaudio": True,
        "audioformat": "best",
        "outtmpl": "%(extractor)s-%(id)s-%(title)s.%(ext)s",
        "restrictfilenames": True,
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª cookies
    cookies_file = os.getenv("YOUTUBE_COOKIES_FILE")
    if cookies_file and os.path.exists(cookies_file):
        ytdl_opts["cookiefile"] = cookies_file
        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º YouTube cookies: {cookies_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ cookies
    browser_cookies = os.getenv("YOUTUBE_BROWSER_COOKIES")
    if browser_cookies and not cookies_file:
        try:
            browser, profile = browser_cookies.split(",", 1)
            ytdl_opts["cookiesfrombrowser"] = (browser.strip(), profile.strip())
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –±—Ä–∞—É–∑–µ—Ä–∞: {browser} ({profile})")
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YOUTUBE_BROWSER_COOKIES: {browser_cookies}")
    
    return ytdl_opts

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ytdl —Å cookies
ytdl_opts = get_ytdl_opts()
ytdl = yt_dlp.YoutubeDL(ytdl_opts)

def log_command(user, command):
    logging.info(f"{user} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {command}")

def get_queue(guild_id):
    return queues.setdefault(guild_id, [])

def create_source(url):
    return discord.FFmpegPCMAudio(
        url,
        before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
        options='-vn'
    )

def is_age_restricted_error(error):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å age-restriction"""
    error_str = str(error).lower()
    age_restricted_keywords = [
        "age-restricted",
        "sign in to confirm your age",
        "video is age restricted", 
        "sign in to confirm",
        "login required"
    ]
    return any(keyword in error_str for keyword in age_restricted_keywords)

def clean_search_query(query):
    """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    cleaned = re.sub(r'[^\w\s\-.,!?]', '', query)
    return cleaned.strip()

async def safe_voice_connect(channel, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    for attempt in range(max_retries):
        try:
            logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É {channel.name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
            existing_vc = discord.utils.get(bot.voice_clients, guild=channel.guild)
            if existing_vc:
                if existing_vc.channel == channel:
                    logger.info("‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É")
                    return existing_vc
                else:
                    logger.info("üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª")
                    await existing_vc.move_to(channel)
                    return existing_vc
            
            # –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            vc = await channel.connect(timeout=10.0, reconnect=True)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {channel.name}")
            return vc
            
        except discord.errors.ClientException as e:
            logger.warning(f"‚ö†Ô∏è ClientException –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if "already connected" in str(e).lower():
                existing_vc = discord.utils.get(bot.voice_clients, guild=channel.guild)
                if existing_vc:
                    return existing_vc
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
        
        if attempt < max_retries - 1:
            wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            logger.info(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(wait_time)
    
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

async def safe_voice_disconnect(vc, guild_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    if not vc:
        return
    
    try:
        logger.info("üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if vc.is_playing() or vc.is_paused():
            vc.stop()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await vc.disconnect(force=True)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await cleanup_guild_data(guild_id)

async def cleanup_guild_data(guild_id):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–∏–ª—å–¥–∏–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø–ª–µ–µ—Ä
        await delete_old_player(guild_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        player_channels.pop(guild_id, None)
        current_tracks.pop(guild_id, None)
        queues.pop(guild_id, None)
        
        logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≥–∏–ª—å–¥–∏–∏: {e}")

async def get_audio_url(track_url, title="Unknown"):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ URL —Å fallback –æ–ø—Ü–∏—è–º–∏"""
    formats_to_try = [
        "bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio",
        "bestaudio/best[height<=720]",
        "best[height<=480]",
        "worst"
    ]
    
    for format_selector in formats_to_try:
        try:
            opts = get_ytdl_opts()
            opts["format"] = format_selector
            
            ytdl_temp = yt_dlp.YoutubeDL(opts)
            info = await asyncio.to_thread(ytdl_temp.extract_info, track_url, False)
            
            if info and info.get("url"):
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ URL –¥–ª—è {title} —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {format_selector}")
                return info["url"]
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {format_selector} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {title}: {str(e)}")
            continue
    
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ URL –¥–ª—è {title} —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤
async def load_track_from_playlist(playlist_url, index):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        opts = get_ytdl_opts(extract_flat=False)  # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        ytdl_temp = yt_dlp.YoutubeDL(opts)
        info = await asyncio.to_thread(ytdl_temp.extract_info, playlist_url, False)
        
        if "entries" in info and len(info["entries"]) > index:
            entry = info["entries"][index]
            return {
                "url": entry.get("url", ""),
                "webpage_url": entry.get("webpage_url", ""),
                "thumbnail": entry.get("thumbnail", ""),
                "title": entry.get("title", "Unknown Track")
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ {index}: {e}")
        raise

class MusicPlayerView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(emoji="‚è∏Ô∏è", style=discord.ButtonStyle.secondary, custom_id="pause_resume")
    async def pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except (discord.HTTPException, discord.DiscordServerError):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å defer, Discord API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        vc = interaction.guild.voice_client
        if not vc:
            try:
                await interaction.followup.send("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
                await create_new_player(interaction.guild.id, interaction.channel)
            except:
                pass
            return
        
        try:
            if vc.is_playing():
                vc.pause()
                await interaction.followup.send("‚è∏Ô∏è –ü–∞—É–∑–∞", ephemeral=True)
            elif vc.is_paused():
                vc.resume()
                await interaction.followup.send("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)
                return
            
            await update_player_buttons(interaction.guild.id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ pause/resume: {e}")
            try:
                await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º.", ephemeral=True)
            except:
                pass
    
    @discord.ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.secondary, custom_id="skip")
    async def skip(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except (discord.HTTPException, discord.DiscordServerError):
            return
        
        vc = interaction.guild.voice_client
        if not vc or not (vc.is_playing() or vc.is_paused()):
            try:
                await interaction.followup.send("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)
            except:
                pass
            return
        
        try:
            vc.stop()
            await interaction.followup.send("‚è≠Ô∏è –°–∫–∏–ø", ephemeral=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ skip: {e}")
    
    @discord.ui.button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.danger, custom_id="stop")
    async def stop(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except (discord.HTTPException, discord.DiscordServerError):
            return
        
        vc = interaction.guild.voice_client
        if not vc:
            try:
                await interaction.followup.send("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
            except:
                pass
            return
        
        try:
            await interaction.followup.send("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...", ephemeral=True)
            await safe_voice_disconnect(vc, interaction.guild.id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ stop: {e}")
    
    @discord.ui.button(emoji="üìÉ", style=discord.ButtonStyle.secondary, custom_id="queue")
    async def show_queue(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue = get_queue(interaction.guild.id)
        
        if not queue:
            try:
                await interaction.response.send_message(f"üì≠ **–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞** (0/{MAX_QUEUE_SIZE})", ephemeral=True)
            except:
                pass
            return
        
        embed = discord.Embed(
            title=f"üìÉ –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ ({len(queue)}/{MAX_QUEUE_SIZE})",
            color=0x2f3136
        )
        
        queue_text = ""
        for i, track in enumerate(queue[:10]):
            status_icon = "‚è≥" if track.get("lazy_load") and not track.get("loaded") else "‚úÖ"
            title_display = track['title'][:45] + ('...' if len(track['title']) > 45 else '')
            queue_text += f"`{i+1}.` {status_icon} **{title_display}**\n*–ó–∞–∫–∞–∑–∞–ª: {track['requester']}*\n\n"
        
        if len(queue) > 10:
            queue_text += f"*... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤*"
        
        embed.description = queue_text if queue_text else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
        embed.set_footer(text=f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}/{MAX_QUEUE_SIZE}")
        
        try:
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except:
            pass

def create_player_embed(guild_id):
    """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–ª–µ–µ—Ä–∞"""
    current_track = current_tracks.get(guild_id)
    queue = get_queue(guild_id)
    
    embed = discord.Embed(color=0x2f3136)
    
    if current_track:
        embed.title = "üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç"
        embed.description = f"**{current_track['title']}**"
        
        embed.add_field(
            name="üë§ –ó–∞–∫–∞–∑–∞–ª", 
            value=current_track['requester'], 
            inline=True
        )
        embed.add_field(
            name="üìÉ –í –æ—á–µ—Ä–µ–¥–∏", 
            value=f"{len(queue)}/{MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤", 
            inline=True
        )
        
        guild = bot.get_guild(guild_id)
        vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
        
        if vc:
            if vc.is_playing():
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç", inline=True)
            elif vc.is_paused():
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚è∏Ô∏è –ü–∞—É–∑–∞", inline=True)
            else:
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", inline=True)
        else:
            embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="üîå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", inline=True)
            
        if 'thumbnail' in current_track and current_track['thumbnail']:
            embed.set_thumbnail(url=current_track['thumbnail'])
    else:
        embed.title = "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä"
        embed.description = "*–ì–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é*"
        
        if queue:
            embed.add_field(
                name="üìÉ –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–µ—Ç", 
                value=f"{len(queue)}/{MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤", 
                inline=True
            )
        
        embed.add_field(
            name="üîä –°—Ç–∞—Ç—É—Å", 
            value="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
            inline=True
        )
    
    return embed

async def delete_old_player(guild_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø–ª–µ–µ—Ä–∞"""
    if guild_id in player_messages:
        try:
            await player_messages[guild_id].delete()
        except:
            pass
        player_messages.pop(guild_id, None)

async def update_player_buttons(guild_id):
    """–ë—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–µ—Ä–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è"""
    if guild_id not in player_messages:
        return
    
    try:
        message = player_messages[guild_id]
        view = MusicPlayerView()
        
        guild = bot.get_guild(guild_id)
        vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
        
        for item in view.children:
            if item.custom_id == "pause_resume":
                if vc and vc.is_playing():
                    item.emoji = "‚è∏Ô∏è"
                else:
                    item.emoji = "‚ñ∂Ô∏è"
                break
        
        await message.edit(view=view)
    except:
        pass

async def create_new_player(guild_id, channel):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä"""
    if not channel:
        return
    
    await delete_old_player(guild_id)
    
    embed = create_player_embed(guild_id)
    view = MusicPlayerView()
    
    guild = bot.get_guild(guild_id)
    vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
    
    for item in view.children:
        if item.custom_id == "pause_resume":
            if vc and vc.is_playing():
                item.emoji = "‚è∏Ô∏è"
            else:
                item.emoji = "‚ñ∂Ô∏è"
            break
    
    try:
        player_msg = await channel.send(embed=embed, view=view)
        player_messages[guild_id] = player_msg
        player_channels[guild_id] = channel
        return True
    except discord.HTTPException:
        return False

async def update_player_message(guild_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞"""
    if guild_id in player_messages:
        try:
            message = player_messages[guild_id]
            embed = create_player_embed(guild_id)
            view = MusicPlayerView()
            
            guild = bot.get_guild(guild_id)
            vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
            
            for item in view.children:
                if item.custom_id == "pause_resume":
                    if vc and vc.is_playing():
                        item.emoji = "‚è∏Ô∏è"
                    else:
                        item.emoji = "‚ñ∂Ô∏è"
                    break
            
            await message.edit(embed=embed, view=view)
            
        except (discord.NotFound, discord.HTTPException):
            channel = player_channels.get(guild_id)
            if channel:
                await create_new_player(guild_id, channel)

@bot.event
async def on_ready():
    logger.info(f"‚úÖ –í–æ—à–ª–∏ –∫–∞–∫ {bot.user}")
    
    cookies_file = os.getenv("YOUTUBE_COOKIES_FILE")
    browser_cookies = os.getenv("YOUTUBE_BROWSER_COOKIES")
    
    if cookies_file and os.path.exists(cookies_file):
        logger.info("üîê YouTube cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (—Ñ–∞–π–ª)")
    elif browser_cookies:
        logger.info("üîê YouTube cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–±—Ä–∞—É–∑–µ—Ä)")
    else:
        logger.info("‚ÑπÔ∏è YouTube cookies –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    logger.info(f"üìä –õ–∏–º–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MAX_PLAYLIST_SIZE} —Ç—Ä–µ–∫–æ–≤")
    logger.info(f"üìä –õ–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤")
    
    bot.add_view(MusicPlayerView())
    
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening,
        name="/help"
    ))
    
    try:
        synced = await tree.sync()
        logger.info(f"üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã {len(synced)} –∫–æ–º–∞–Ω–¥(—ã)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ sync: {e}")

@bot.event
async def on_voice_state_update(member, before, after):
    if member.bot:
        return

    vc = discord.utils.get(bot.voice_clients, guild=member.guild)

    if vc and vc.channel and len(vc.channel.members) == 1: 
        if vc.is_playing():
            vc.pause() 
            logger.info("‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
            await update_player_buttons(member.guild.id)

        await asyncio.sleep(60)  
        if vc.channel and len(vc.channel.members) == 1:  
            logger.info(f"‚èπÔ∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {vc.channel.name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {member.guild.name}")
            await safe_voice_disconnect(vc, member.guild.id)

@tree.command(name="play", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å YouTube")
@app_commands.describe(query="–°—Å—ã–ª–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å")
async def play(interaction: discord.Interaction, query: str):
    log_command(interaction.user.name, "/play")

    vc = interaction.guild.voice_client
    if not vc:
        if interaction.user.voice and interaction.user.voice.channel:
            try:
                vc = await safe_voice_connect(interaction.user.voice.channel)
            except Exception as e:
                await interaction.response.send_message(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É**\n"
                    f"üí° {str(e)}", 
                    ephemeral=True
                )
                return
        else:
            await interaction.response.send_message("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ—á–µ—Ä–µ–¥–∏
    queue = get_queue(interaction.guild.id)
    
    if len(queue) >= MAX_QUEUE_SIZE:
        await interaction.response.send_message(
            f"‚ùå **–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!**\n"
            f"üí° –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {MAX_QUEUE_SIZE}\n"
            f"üìä –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)} —Ç—Ä–µ–∫–æ–≤\n"
            f"üéµ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/skip`",
            ephemeral=True
        )
        return

    try:
        await interaction.response.send_message("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", ephemeral=True)
    except (discord.HTTPException, discord.DiscordServerError):
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, Discord API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    search_query = f"ytsearch1:{clean_search_query(query)}" if not (query.startswith("http://") or query.startswith("https://")) else query

    try:
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        
        # –î–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º extract_flat=True –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        opts = get_ytdl_opts(extract_flat=True)
        ytdl_temp = yt_dlp.YoutubeDL(opts)
        info = await asyncio.to_thread(ytdl_temp.extract_info, search_query, False)
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç yt-dlp")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {str(e)}")
        try:
            error_msg = str(e).lower()
            if is_age_restricted_error(e):
                await interaction.edit_original_response(content="üîû **–ö–æ–Ω—Ç–µ–Ω—Ç —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏**\n‚ùå –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            elif "requested format is not available" in error_msg or "format not available" in error_msg:
                await interaction.edit_original_response(content="‚ùå **–§–æ—Ä–º–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\nüí° –≠—Ç–æ—Ç —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
            elif "video unavailable" in error_msg or "private video" in error_msg:
                await interaction.edit_original_response(content="‚ùå **–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**\nüí° –í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–º.")
            else:
                await interaction.edit_original_response(content=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        except:
            pass
        return

    if not info:
        logger.error("‚ùå yt-dlp –≤–µ—Ä–Ω—É–ª None")
        try:
            await interaction.edit_original_response(
                content="‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ**\n"
                       "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ.\n"
                       "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É."
            )
        except:
            pass
        return

    if "entries" in info and info["entries"]:
        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        total_entries = len(info["entries"])
        logger.info(f"üìÉ –ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç —Å {total_entries} —Ç—Ä–µ–∫–æ–≤")
        
        remaining_slots = MAX_QUEUE_SIZE - len(queue)
        
        if remaining_slots <= 0:
            await interaction.edit_original_response(
                content=f"‚ùå **–û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞—è!** ({len(queue)}/{MAX_QUEUE_SIZE})\n"
                        f"üéµ –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤."
            )
            return
        
        max_to_add = min(MAX_PLAYLIST_SIZE, remaining_slots)
        entries_to_process = info["entries"][:max_to_add]
        
        logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(entries_to_process)} –∏–∑ {total_entries} —Ç—Ä–µ–∫–æ–≤")
        
        valid_entries = []
        for entry in entries_to_process:
            if entry and entry.get("title") and (entry.get("url") or entry.get("webpage_url")):
                valid_entries.append(entry)
        
        if not valid_entries:
            await interaction.edit_original_response(
                content="‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤**\n"
                       "–í –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."
            )
            return
        
        added_count = 0
        for i, entry in enumerate(valid_entries):
            queue.append({
                "title": entry.get("title", f"Track {i+1}"),
                "playlist_url": search_query,
                "playlist_index": i,
                "lazy_load": True,
                "loaded": False,
                "requester": interaction.user.name,
            })
            added_count += 1
        
        try:
            message_parts = []
            message_parts.append(f"üìÉ **–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∏–∑ {total_entries} —Ç—Ä–µ–∫–æ–≤**")
            
            if total_entries > max_to_add:
                if remaining_slots < MAX_PLAYLIST_SIZE:
                    message_parts.append(f"üí° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ª–∏–º–∏—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏: {remaining_slots} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")
                else:
                    message_parts.append(f"üí° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ª–∏–º–∏—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–∞: {MAX_PLAYLIST_SIZE} —Ç—Ä–µ–∫–æ–≤")
            
            message_parts.append(f"üìä –û—á–µ—Ä–µ–¥—å: {len(queue)}/{MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤")
            
            await interaction.edit_original_response(content="\n".join(message_parts))
            logger.info(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {added_count}/{total_entries} —Ç—Ä–µ–∫–æ–≤")
        except:
            pass
    elif info.get("title"):
        if len(queue) >= MAX_QUEUE_SIZE:
            await interaction.edit_original_response(
                content=f"‚ùå **–û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞—è!** ({len(queue)}/{MAX_QUEUE_SIZE})"
            )
            return
            
        track = {
            "title": info["title"],
            "url": info.get("url", ""),
            "webpage_url": info.get("webpage_url", ""),
            "thumbnail": info.get("thumbnail", ""),
            "requester": interaction.user.name,
            "lazy_load": False,
            "loaded": True,
        }
        queue.append(track)
        logger.info(f"üé∂ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track['title']}")
        try:
            await interaction.edit_original_response(
                content=f"üé∂ **–î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫:** {track['title']}\n"
                        f"üìä –û—á–µ—Ä–µ–¥—å: {len(queue)}/{MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤"
            )
        except:
            pass
    else:
        logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç yt-dlp")
        try:
            await interaction.edit_original_response(
                content="‚ùå **–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**\n"
                       "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ.\n"
                       "üí° –í–æ–∑–º–æ–∂–Ω–æ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ."
            )
        except:
            pass
        return

    player_channels[interaction.guild.id] = interaction.channel
    await create_new_player(interaction.guild.id, interaction.channel)

    if not vc.is_playing():
        await play_next(vc, interaction.guild.id)

async def play_next(vc, guild_id):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    queue = get_queue(guild_id)
    if not queue:
        current_tracks[guild_id] = None
        logger.info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        channel = player_channels.get(guild_id)
        if channel:
            await create_new_player(guild_id, channel)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ voice client
    if not vc or not vc.is_connected():
        logger.warning("‚ö†Ô∏è Voice client –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
        await cleanup_guild_data(guild_id)
        return

    next_track = queue.pop(0)
    current_tracks[guild_id] = next_track
    logger.info(f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫: {next_track['title']}")
    
    # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    if next_track.get("lazy_load") and not next_track.get("loaded"):
        try:
            logger.info(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è: {next_track['title']}")
            full_info = await load_track_from_playlist(
                next_track["playlist_url"], 
                next_track["playlist_index"]
            )
            next_track.update(full_info)
            next_track["loaded"] = True
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è: {next_track['title']}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫: {e}")
            await play_next(vc, guild_id)
            return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if next_track.get("url"):
            audio_url = await get_audio_url(next_track["url"], next_track["title"])
        else:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞: {next_track['title']}")
            await play_next(vc, guild_id)
            return
        
        source = create_source(audio_url)
        
        def after_play(error):
            if error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                error_str = str(error).lower()
                if "4006" in error_str or "connection" in error_str:
                    logger.error("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Discord voice (4006)")
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ voice client –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
            if vc and vc.is_connected():
                bot.loop.create_task(play_next(vc, guild_id))
            else:
                logger.warning("‚ö†Ô∏è Voice client –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                bot.loop.create_task(cleanup_guild_data(guild_id))
        
        vc.play(source, after=after_play)
        logger.info(f"üéµ –ò–≥—Ä–∞–µ—Ç: {next_track['title']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è {next_track['title']}: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        await play_next(vc, guild_id)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
    channel = player_channels.get(guild_id)
    if channel:
        await create_new_player(guild_id, channel)

@tree.command(name="pause", description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def pause(interaction: discord.Interaction):
    log_command(interaction.user.name, "/pause")
    vc = interaction.guild.voice_client
    if vc and vc.is_playing():
        vc.pause()
        await interaction.response.send_message("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", ephemeral=True)
        await update_player_buttons(interaction.guild.id)
    else:
        await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)

@tree.command(name="resume", description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def resume(interaction: discord.Interaction):
    log_command(interaction.user.name, "/resume")
    vc = interaction.guild.voice_client
    if vc and vc.is_paused():
        vc.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ.", ephemeral=True)
        await update_player_buttons(interaction.guild.id)
    else:
        await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", ephemeral=True)

@tree.command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def stop(interaction: discord.Interaction):
    log_command(interaction.user.name, "/stop")
    vc = interaction.guild.voice_client
    if vc:
        await interaction.response.send_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...", ephemeral=True)
        await safe_voice_disconnect(vc, interaction.guild.id)
    else:
        await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)

@tree.command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é")
async def skip(interaction: discord.Interaction):
    log_command(interaction.user.name, "/skip")
    vc = interaction.guild.voice_client
    if vc and (vc.is_playing() or vc.is_paused()):
        vc.stop()
        await interaction.response.send_message("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)

@tree.command(name="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å")
async def queue_cmd(interaction: discord.Interaction):
    log_command(interaction.user.name, "/queue")
    queue = get_queue(interaction.guild.id)
    
    if not queue:
        await interaction.response.send_message(f"üì≠ **–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞** (0/{MAX_QUEUE_SIZE})", ephemeral=True)
        return
    
    embed = discord.Embed(
        title=f"üìÉ –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ ({len(queue)}/{MAX_QUEUE_SIZE})",
        color=0x2f3136
    )
    
    queue_text = ""
    for i, track in enumerate(queue[:10]):
        status_icon = "‚è≥" if track.get("lazy_load") and not track.get("loaded") else "‚úÖ"
        title_display = track['title'][:45] + ('...' if len(track['title']) > 45 else '')
        queue_text += f"`{i+1}.` {status_icon} **{title_display}**\n*–ó–∞–∫–∞–∑–∞–ª: {track['requester']}*\n\n"
    
    if len(queue) > 10:
        queue_text += f"*... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤*"
    
    embed.description = queue_text
    embed.set_footer(text=f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}/{MAX_QUEUE_SIZE}")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –æ—á–µ—Ä–µ–¥–∏")
async def status(interaction: discord.Interaction):
    log_command(interaction.user.name, "/status")
    queue = get_queue(interaction.guild.id)
    vc = interaction.guild.voice_client
    current_track = current_tracks.get(interaction.guild.id)
    
    embed = discord.Embed(
        title="ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞",
        color=0x2f3136
    )
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if vc and vc.is_connected():
        channel_name = vc.channel.name
        if vc.is_playing():
            embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value=f"üéµ –ò–≥—Ä–∞–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ: **{channel_name}**", inline=False)
        elif vc.is_paused():
            embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value=f"‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ –≤ –∫–∞–Ω–∞–ª–µ: **{channel_name}**", inline=False)
        else:
            embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value=f"‚èπÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: **{channel_name}**", inline=False)
    else:
        embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="üîå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É", inline=False)
    
    # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    if current_track:
        embed.add_field(
            name="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", 
            value=f"**{current_track['title']}**\n*–ó–∞–∫–∞–∑–∞–ª: {current_track['requester']}*", 
            inline=False
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    embed.add_field(name="üìä –û—á–µ—Ä–µ–¥—å", value=f"**{len(queue)}/{MAX_QUEUE_SIZE}** —Ç—Ä–µ–∫–æ–≤", inline=True)
    embed.add_field(name="‚öôÔ∏è –õ–∏–º–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç–∞", value=f"**{MAX_PLAYLIST_SIZE}** —Ç—Ä–µ–∫–æ–≤", inline=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if queue:
        lazy_count = sum(1 for track in queue if track.get("lazy_load") and not track.get("loaded"))
        if lazy_count > 0:
            embed.add_field(name="‚è≥ –ö –∑–∞–≥—Ä—É–∑–∫–µ", value=f"**{lazy_count}** —Ç—Ä–µ–∫–æ–≤", inline=True)
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
async def help_cmd(interaction: discord.Interaction):
    log_command(interaction.user.name, "/help")
    
    embed = discord.Embed(
        title="üìñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞",
        description="–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –º—É–∑—ã–∫–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –ø–ª–µ–µ—Ä–∞",
        color=0x2f3136
    )
    
    embed.add_field(
        name="üéµ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        value=(
            "`/play <–∑–∞–ø—Ä–æ—Å>` ‚Äî –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫\n"
            "`/pause` ‚Äî –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            "`/resume` ‚Äî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n"
            "`/stop` ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è\n"
            "`/skip` ‚Äî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫\n"
            "`/queue` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
            "`/status` ‚Äî –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üéõÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä",
        value=(
            "‚è∏Ô∏è/‚ñ∂Ô∏è ‚Äî –ü–∞—É–∑–∞/–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n"
            "‚è≠Ô∏è ‚Äî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫\n"
            "‚èπÔ∏è ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            "üìÉ ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"
        ),
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
        value=(
            f"üìä –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: **{MAX_QUEUE_SIZE}**\n"
            f"üìÉ –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: **{MAX_PLAYLIST_SIZE}**\n"
            "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (Lazy Loading)\n"
            "üë§ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ —Ç—Ä–µ–∫–æ–≤"
        ),
        inline=False
    )
    
    embed.set_footer(text="üí° –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–º–∞–Ω–¥ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º!")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

bot.run(TOKEN)
