import os
import logging
import discord
import asyncio
import yt_dlp
import time
from discord.ext import commands
from discord import app_commands
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("DISCORD_TOKEN")
MAX_PLAYLIST_SIZE = 100

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
guild_data = {}

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

@dataclass
class Track:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    title: str
    url: str
    webpage_url: str = ""
    duration: Optional[int] = None
    thumbnail: Optional[str] = None
    uploader: Optional[str] = None
    requester: str = "Unknown"
    requested_at: datetime = None
    
    def __post_init__(self):
        if self.requested_at is None:
            self.requested_at = datetime.utcnow()
        if not self.webpage_url:
            self.webpage_url = self.url
    
    @property
    def duration_str(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        if not self.duration:
            return "00:00"
        
        minutes = self.duration // 60
        seconds = self.duration % 60
        return f"{minutes:02d}:{seconds:02d}"

class MusicQueue:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –º—É–∑—ã–∫–∏"""
    
    def __init__(self):
        self.tracks: List[Track] = []
        self.history: List[Track] = []
        self.current: Optional[Track] = None
        self.loop_mode = "none"  # none, track, queue
        
    def add(self, track: Track):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.tracks.append(track)
    
    def add_multiple(self, tracks: List[Track]):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤"""
        self.tracks.extend(tracks)
    
    def next(self) -> Optional[Track]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        if self.current:
            self.history.append(self.current)
        
        if self.loop_mode == "track" and self.current:
            return self.current
        
        if not self.tracks:
            if self.loop_mode == "queue" and self.history:
                self.tracks = self.history.copy()
                self.history.clear()
            else:
                self.current = None
                return None
        
        self.current = self.tracks.pop(0)
        return self.current
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        self.tracks.clear()
        self.current = None
    
    def shuffle(self):
        """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        import random
        random.shuffle(self.tracks)
    
    @property
    def is_empty(self) -> bool:
        return len(self.tracks) == 0 and self.current is None

@dataclass
class GuildMusicData:
    """–î–∞–Ω–Ω—ã–µ –º—É–∑—ã–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    queue: MusicQueue
    voice_client: Optional[discord.VoiceClient] = None
    player_message: Optional[discord.Message] = None
    volume: int = 100
    start_time: Optional[float] = None
    is_paused: bool = False
    
    def __post_init__(self):
        if self.queue is None:
            self.queue = MusicQueue()

# YouTube DL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ytdl_opts = {
    "format": "bestaudio/best",
    "extractaudio": True,
    "audioformat": "mp3",
    "outtmpl": "%(extractor)s-%(id)s-%(title)s.%(ext)s",
    "restrictfilenames": True,
    "noplaylist": False,
    "nocheckcertificate": True,
    "ignoreerrors": False,
    "logtostderr": False,
    "quiet": True,
    "no_warnings": True,
    "default_search": "auto",
    "source_address": "0.0.0.0",
}

ytdl = yt_dlp.YoutubeDL(ytdl_opts)

def get_guild_data(guild_id: int) -> GuildMusicData:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    if guild_id not in guild_data:
        guild_data[guild_id] = GuildMusicData(queue=MusicQueue())
    return guild_data[guild_id]

def create_player_embed(track: Track, guild_data: GuildMusicData) -> discord.Embed:
    """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–ª–µ–µ—Ä–∞"""
    embed = discord.Embed(
        title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
        color=0x2F3136
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
    track_info = f"**{track.title}**\n{track.uploader or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}"
    embed.description = track_info
    
    # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞
    if track.thumbnail:
        embed.set_thumbnail(url=track.thumbnail)
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    embed.add_field(
        name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        value=track.duration_str,
        inline=False
    )
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫
    embed.add_field(
        name="",
        value=f"YouTube (–¥–æ–±–∞–≤–ª–µ–Ω: @{track.requester})",
        inline=False
    )
    
    # –¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
    queue_count = len(guild_data.queue.tracks)
    embed.add_field(
        name="",
        value=f"**–¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:** {queue_count}",
        inline=False
    )
    
    return embed

def create_idle_embed() -> discord.Embed:
    """Embed –∫–æ–≥–¥–∞ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç"""
    embed = discord.Embed(
        title="–ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É",
        color=0x2F3136
    )
    return embed

async def send_temp_message(interaction: discord.Interaction, content: str, embed: discord.Embed = None, ephemeral: bool = True, delete_after: int = 5):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        if embed:
            message = await interaction.followup.send(embed=embed, ephemeral=ephemeral)
        else:
            message = await interaction.followup.send(content, ephemeral=ephemeral)
        
        # –ï—Å–ª–∏ ephemeral=True, Discord —Å–∞–º —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å
        if not ephemeral and delete_after > 0:
            await asyncio.sleep(delete_after)
            try:
                await message.delete()
            except:
                pass
    except:
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if embed:
            await interaction.response.send_message(embed=embed, ephemeral=ephemeral)
        else:
            await interaction.response.send_message(content, ephemeral=ephemeral)

class MusicPlayerView(discord.ui.View):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π"""
    
    def __init__(self, guild_id: int):
        super().__init__(timeout=None)
        self.guild_id = guild_id
        self.setup_buttons()
    
    def setup_buttons(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        guild_data_obj = get_guild_data(self.guild_id)
        
        # –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.clear_items()
        
        # –†—è–¥ 1: Shuffle, Volume down, Volume up, Repeat
        shuffle_btn = discord.ui.Button(emoji="üîÄ", style=discord.ButtonStyle.secondary, row=0)
        shuffle_btn.callback = self.shuffle_callback
        self.add_item(shuffle_btn)
        
        vol_down_btn = discord.ui.Button(emoji="üîâ", style=discord.ButtonStyle.secondary, row=0)
        vol_down_btn.callback = self.volume_down_callback
        self.add_item(vol_down_btn)
        
        vol_up_btn = discord.ui.Button(emoji="üîä", style=discord.ButtonStyle.secondary, row=0)
        vol_up_btn.callback = self.volume_up_callback
        self.add_item(vol_up_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
        loop_emoji = "üîÅ"
        if guild_data_obj.queue.loop_mode == "track":
            loop_emoji = "üîÇ"
        repeat_btn = discord.ui.Button(emoji=loop_emoji, style=discord.ButtonStyle.secondary, row=0)
        repeat_btn.callback = self.repeat_callback
        self.add_item(repeat_btn)
        
        # –†—è–¥ 2: Play/Pause, Stop, Next
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Play/Pause
        if guild_data_obj.voice_client and guild_data_obj.voice_client.is_playing():
            play_pause_btn = discord.ui.Button(emoji="‚è∏Ô∏è", style=discord.ButtonStyle.secondary, row=1)
        else:
            play_pause_btn = discord.ui.Button(emoji="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary, row=1)
        play_pause_btn.callback = self.play_pause_callback
        self.add_item(play_pause_btn)
        
        stop_btn = discord.ui.Button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.secondary, row=1)
        stop_btn.callback = self.stop_callback
        self.add_item(stop_btn)
        
        next_btn = discord.ui.Button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.secondary, row=1)
        next_btn.callback = self.next_callback
        self.add_item(next_btn)
        
        # –†—è–¥ 3: Queue, Leave
        queue_btn = discord.ui.Button(emoji="üìã", style=discord.ButtonStyle.secondary, row=2)
        queue_btn.callback = self.queue_callback
        self.add_item(queue_btn)
        
        leave_btn = discord.ui.Button(emoji="üö™", style=discord.ButtonStyle.danger, row=2)
        leave_btn.callback = self.leave_callback
        self.add_item(leave_btn)

    async def shuffle_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        if len(guild_data_obj.queue.tracks) < 2:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è", ephemeral=True)
            return
        
        guild_data_obj.queue.shuffle()
        await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞", ephemeral=True)

    async def volume_down_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        guild_data_obj.volume = max(0, guild_data_obj.volume - 10)
        await self.update_player_message(interaction)
        await interaction.response.send_message(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å: {guild_data_obj.volume}%", ephemeral=True)

    async def volume_up_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        guild_data_obj.volume = min(200, guild_data_obj.volume + 10)
        await self.update_player_message(interaction)
        await interaction.response.send_message(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å: {guild_data_obj.volume}%", ephemeral=True)

    async def repeat_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        
        if guild_data_obj.queue.loop_mode == "none":
            guild_data_obj.queue.loop_mode = "track"
            mode_text = "–ü–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞ –≤–∫–ª—é—á–µ–Ω"
        elif guild_data_obj.queue.loop_mode == "track":
            guild_data_obj.queue.loop_mode = "queue"
            mode_text = "–ü–æ–≤—Ç–æ—Ä –æ—á–µ—Ä–µ–¥–∏ –≤–∫–ª—é—á–µ–Ω"
        else:
            guild_data_obj.queue.loop_mode = "none"
            mode_text = "–ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω"
        
        await self.update_player_message(interaction)
        await interaction.response.send_message(mode_text, ephemeral=True)

    async def play_pause_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        vc = guild_data_obj.voice_client
        
        if not vc:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É", ephemeral=True)
            return
        
        if vc.is_playing():
            vc.pause()
            guild_data_obj.is_paused = True
            await self.update_player_message(interaction)
            await interaction.response.send_message("–ü–∞—É–∑–∞", ephemeral=True)
        elif vc.is_paused():
            vc.resume()
            guild_data_obj.is_paused = False
            await self.update_player_message(interaction)
            await interaction.response.send_message("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ", ephemeral=True)
        else:
            await interaction.response.send_message("–ù–µ—á–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å", ephemeral=True)

    async def stop_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        vc = guild_data_obj.voice_client
        
        if not vc:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", ephemeral=True)
            return
        
        vc.stop()
        guild_data_obj.queue.clear()
        await self.update_player_message(interaction, stopped=True)
        await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", ephemeral=True)

    async def next_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        vc = guild_data_obj.voice_client
        
        if not vc or not vc.is_playing():
            await interaction.response.send_message("–ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å", ephemeral=True)
            return
        
        vc.stop()
        await interaction.response.send_message("–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω", ephemeral=True)

    async def queue_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        
        if guild_data_obj.queue.is_empty:
            await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", ephemeral=True)
            return
        
        tracks = guild_data_obj.queue.tracks[:10]
        queue_text = ""
        
        for i, track in enumerate(tracks, 1):
            queue_text += f"`{i}.` **{track.title[:40]}{'...' if len(track.title) > 40 else ''}**\n"
        
        embed = discord.Embed(
            title="–û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤",
            description=queue_text,
            color=0x2F3136
        )
        
        if len(guild_data_obj.queue.tracks) > 10:
            embed.set_footer(text=f"–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(guild_data_obj.queue.tracks)} —Ç—Ä–µ–∫–æ–≤")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    async def leave_callback(self, interaction: discord.Interaction):
        guild_data_obj = get_guild_data(self.guild_id)
        vc = guild_data_obj.voice_client
        
        if not vc:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", ephemeral=True)
            return
        
        guild_data_obj.queue.clear()
        vc.stop()
        await vc.disconnect()
        guild_data_obj.voice_client = None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
        if guild_data_obj.player_message:
            embed = create_idle_embed()
            view = MusicPlayerView(self.guild_id)
            try:
                await guild_data_obj.player_message.edit(embed=embed, view=view)
            except:
                pass
        
        await interaction.response.send_message("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞", ephemeral=True)

    async def update_player_message(self, interaction: discord.Interaction, stopped: bool = False):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞"""
        guild_data_obj = get_guild_data(self.guild_id)
        
        if not guild_data_obj.player_message:
            return
        
        if stopped or not guild_data_obj.queue.current:
            embed = create_idle_embed()
        else:
            embed = create_player_embed(guild_data_obj.queue.current, guild_data_obj)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.setup_buttons()
        
        try:
            await guild_data_obj.player_message.edit(embed=embed, view=self)
        except:
            pass

async def extract_track_info(url_or_query: str, requester: str) -> tuple[List[Track], bool]:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ(–∞—Ö) –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    
    def extract():
        try:
            if not (url_or_query.startswith("http://") or url_or_query.startswith("https://")):
                search_query = f"ytsearch1:{url_or_query}"
            else:
                search_query = url_or_query
            
            info = ytdl.extract_info(search_query, download=False)
            return info
        except Exception as e:
            raise e
    
    loop = asyncio.get_event_loop()
    try:
        info = await loop.run_in_executor(None, extract)
    except yt_dlp.utils.ExtractorError as e:
        error_msg = str(e).lower()
        if "private" in error_msg:
            raise Exception("–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ)")
        elif "region" in error_msg:
            raise Exception("–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {str(e)}")
    except Exception as e:
        raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    tracks = []
    is_playlist = False
    
    if "entries" in info:
        entries = info["entries"]
        entries = [entry for entry in entries if entry is not None]
        
        if len(entries) > 1:
            is_playlist = True
            if len(entries) > MAX_PLAYLIST_SIZE:
                entries = entries[:MAX_PLAYLIST_SIZE]
        
        for entry in entries:
            track = Track(
                title=entry.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"),
                url=entry.get("url", ""),
                webpage_url=entry.get("webpage_url", ""),
                duration=entry.get("duration"),
                thumbnail=entry.get("thumbnail"),
                uploader=entry.get("uploader"),
                requester=requester
            )
            tracks.append(track)
    else:
        track = Track(
            title=info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"),
            url=info.get("url", ""),
            webpage_url=info.get("webpage_url", ""),
            duration=info.get("duration"),
            thumbnail=info.get("thumbnail"),
            uploader=info.get("uploader"),
            requester=requester
        )
        tracks.append(track)
    
    return tracks, is_playlist

def create_source(url: str, volume: int = 100):
    """–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫"""
    volume_float = volume / 100.0
    return discord.FFmpegPCMAudio(
        url,
        before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
        options=f'-vn -filter:a "volume={volume_float}"'
    )

async def play_next(guild_id: int):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
    guild_data_obj = get_guild_data(guild_id)
    vc = guild_data_obj.voice_client
    
    if not vc:
        return
    
    next_track = guild_data_obj.queue.next()
    if not next_track:
        # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
        if guild_data_obj.player_message:
            embed = create_idle_embed()
            view = MusicPlayerView(guild_id)
            try:
                await guild_data_obj.player_message.edit(embed=embed, view=view)
            except:
                pass
        return
    
    try:
        source = create_source(next_track.url, guild_data_obj.volume)
        guild_data_obj.start_time = time.time()
        guild_data_obj.is_paused = False
        
        def after_track(error):
            if error:
                logging.error(f"Player error: {error}")
            else:
                asyncio.run_coroutine_threadsafe(play_next(guild_id), bot.loop)
        
        vc.play(source, after=after_track)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
        if guild_data_obj.player_message:
            embed = create_player_embed(next_track, guild_data_obj)
            view = MusicPlayerView(guild_id)
            try:
                await guild_data_obj.player_message.edit(embed=embed, view=view)
            except:
                pass
        
    except Exception as e:
        logging.error(f"Error playing track: {e}")
        await play_next(guild_id)

@bot.event
async def on_ready():
    print(f"–í–æ—à–ª–∏ –∫–∞–∫ {bot.user}")
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening,
        name="/play"
    ))
    try:
        synced = await tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ sync: {e}")

@bot.event
async def on_voice_state_update(member, before, after):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    if member.bot:
        return

    for vc in bot.voice_clients:
        if vc.guild == member.guild and vc.channel:
            human_members = [m for m in vc.channel.members if not m.bot]
            
            if len(human_members) == 0:
                if vc.is_playing():
                    vc.pause()
                
                await asyncio.sleep(60)
                
                human_members = [m for m in vc.channel.members if not m.bot]
                if len(human_members) == 0:
                    guild_data_obj = get_guild_data(vc.guild.id)
                    guild_data_obj.queue.clear()
                    await vc.disconnect()
                    guild_data_obj.voice_client = None
            
            elif len(human_members) > 0 and vc.is_paused():
                vc.resume()

@tree.command(name="play", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É")
@app_commands.describe(query="–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
async def play(interaction: discord.Interaction, query: str):
    """–ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏"""
    await interaction.response.defer()
    
    guild_data_obj = get_guild_data(interaction.guild.id)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    if not guild_data_obj.voice_client:
        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.followup.send("–°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", ephemeral=True)
            return
        
        try:
            guild_data_obj.voice_client = await interaction.user.voice.channel.connect()
        except Exception as e:
            await interaction.followup.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É: {e}", ephemeral=True)
            return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
        tracks, is_playlist = await extract_track_info(query, interaction.user.display_name)
        
        if not tracks:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞",
                description="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        was_empty = guild_data_obj.queue.is_empty
        
        if is_playlist:
            guild_data_obj.queue.add_multiple(tracks)
            success_text = f"–î–æ–±–∞–≤–ª–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç: {len(tracks)} —Ç—Ä–µ–∫–æ–≤"
        else:
            guild_data_obj.queue.add(tracks[0])
            success_text = f"–î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {tracks[0].title}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        await interaction.followup.send(success_text, ephemeral=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
        if not guild_data_obj.player_message:
            if guild_data_obj.queue.current:
                embed = create_player_embed(guild_data_obj.queue.current, guild_data_obj)
            else:
                embed = create_idle_embed()
            
            view = MusicPlayerView(interaction.guild.id)
            guild_data_obj.player_message = await interaction.followup.send(embed=embed, view=view)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if was_empty and not guild_data_obj.voice_client.is_playing():
            await play_next(interaction.guild.id)
    
    except Exception as e:
        embed = discord.Embed(
            title="–û—à–∏–±–∫–∞",
            description=str(e),
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

@tree.command(name="player", description="–ü–æ–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä")
async def player(interaction: discord.Interaction):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–µ—Ä"""
    guild_data_obj = get_guild_data(interaction.guild.id)
    
    if guild_data_obj.queue.current:
        embed = create_player_embed(guild_data_obj.queue.current, guild_data_obj)
    else:
        embed = create_idle_embed()
    
    view = MusicPlayerView(interaction.guild.id)
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if guild_data_obj.player_message:
        try:
            await guild_data_obj.player_message.edit(embed=embed, view=view)
            await interaction.response.send_message("–ü–ª–µ–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω", ephemeral=True)
        except:
            guild_data_obj.player_message = await interaction.response.send_message(embed=embed, view=view)
    else:
        guild_data_obj.player_message = await interaction.response.send_message(embed=embed, view=view)

@tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
async def help_cmd(interaction: discord.Interaction):
    embed = discord.Embed(
        title="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        description="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è Discord",
        color=0x2F3136
    )
    
    embed.add_field(
        name="–ö–æ–º–∞–Ω–¥—ã",
        value="""
/play <–∑–∞–ø—Ä–æ—Å> - –î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É
/player - –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """,
        inline=False
    )
    
    embed.add_field(
        name="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        value="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–ª–µ–µ—Ä–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

if __name__ == "__main__":
    bot.run(TOKEN)
