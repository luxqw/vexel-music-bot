import os
import logging
import discord
import asyncio
import yt_dlp
import time
from discord.ext import commands
from discord import app_commands
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("DISCORD_TOKEN")
MAX_PLAYLIST_SIZE = 100
QUEUE_PAGE_SIZE = 10

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
guild_data = {}  # {guild_id: GuildMusicData}

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

@dataclass
class Track:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    title: str
    url: str
    webpage_url: str
    duration: Optional[int] = None
    thumbnail: Optional[str] = None
    uploader: Optional[str] = None
    requester: str = "Unknown"
    requested_at: datetime = None
    
    def __post_init__(self):
        if self.requested_at is None:
            self.requested_at = datetime.utcnow()
    
    @property
    def duration_str(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        if not self.duration:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        minutes = self.duration // 60
        seconds = self.duration % 60
        return f"{minutes}:{seconds:02d}"

class MusicQueue:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –º—É–∑—ã–∫–∏"""
    
    def __init__(self):
        self.tracks: List[Track] = []
        self.history: List[Track] = []
        self.current: Optional[Track] = None
        self.loop_mode = "none"  # none, track, queue
        
    def add(self, track: Track):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.tracks.append(track)
    
    def add_multiple(self, tracks: List[Track]):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤"""
        self.tracks.extend(tracks)
    
    def next(self) -> Optional[Track]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        if self.current:
            self.history.append(self.current)
        
        if self.loop_mode == "track" and self.current:
            return self.current
        
        if not self.tracks:
            if self.loop_mode == "queue" and self.history:
                self.tracks = self.history.copy()
                self.history.clear()
            else:
                self.current = None
                return None
        
        self.current = self.tracks.pop(0)
        return self.current
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        self.tracks.clear()
        self.current = None
    
    def remove(self, index: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.tracks):
            self.tracks.pop(index)
            return True
        return False
    
    def shuffle(self):
        """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        import random
        random.shuffle(self.tracks)
    
    @property
    def is_empty(self) -> bool:
        return len(self.tracks) == 0 and self.current is None

@dataclass
class GuildMusicData:
    """–î–∞–Ω–Ω—ã–µ –º—É–∑—ã–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    queue: MusicQueue
    voice_client: Optional[discord.VoiceClient] = None
    now_playing_message: Optional[discord.Message] = None
    volume: float = 0.5
    start_time: Optional[float] = None
    
    def __post_init__(self):
        if self.queue is None:
            self.queue = MusicQueue()

# YouTube DL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ytdl_opts = {
    "format": "bestaudio/best",
    "extractaudio": True,
    "audioformat": "mp3",
    "outtmpl": "%(extractor)s-%(id)s-%(title)s.%(ext)s",
    "restrictfilenames": True,
    "noplaylist": False,  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã
    "nocheckcertificate": True,
    "ignoreerrors": False,
    "logtostderr": False,
    "quiet": True,
    "no_warnings": True,
    "default_search": "auto",
    "source_address": "0.0.0.0",
}

ytdl = yt_dlp.YoutubeDL(ytdl_opts)

def get_guild_data(guild_id: int) -> GuildMusicData:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    if guild_id not in guild_data:
        guild_data[guild_id] = GuildMusicData(queue=MusicQueue())
    return guild_data[guild_id]

def create_progress_bar(current: int, total: int, length: int = 20) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    if total <= 0:
        return "‚ñ±" * length
    
    filled = int((current / total) * length)
    bar = "‚ñ∞" * filled + "‚ñ±" * (length - filled)
    return bar

def create_now_playing_embed(track: Track, guild_data: GuildMusicData) -> discord.Embed:
    """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
    embed = discord.Embed(
        title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
        description=f"**[{track.title}]({track.webpage_url})**",
        color=discord.Color.green()
    )
    
    if track.thumbnail:
        embed.set_thumbnail(url=track.thumbnail)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    if guild_data.start_time and track.duration:
        elapsed = int(time.time() - guild_data.start_time)
        progress = create_progress_bar(elapsed, track.duration)
        
        elapsed_str = f"{elapsed // 60}:{elapsed % 60:02d}"
        duration_str = track.duration_str
        
        embed.add_field(
            name="‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å",
            value=f"`{elapsed_str}` {progress} `{duration_str}`",
            inline=False
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    embed.add_field(name="üë§ –ó–∞–ø—Ä–æ—Å–∏–ª", value=track.requester, inline=True)
    
    if track.uploader:
        embed.add_field(name="üì∫ –ö–∞–Ω–∞–ª", value=track.uploader, inline=True)
    
    embed.add_field(name="üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å", value=f"{int(guild_data.volume * 100)}%", inline=True)
    
    # –û—á–µ—Ä–µ–¥—å
    queue_size = len(guild_data.queue.tracks)
    if queue_size > 0:
        next_track = guild_data.queue.tracks[0]
        embed.add_field(
            name=f"üìÉ –°–ª–µ–¥—É—é—â–∏–π ({queue_size} –≤ –æ—á–µ—Ä–µ–¥–∏)",
            value=next_track.title[:50] + ("..." if len(next_track.title) > 50 else ""),
            inline=False
        )
    
    embed.set_footer(text=f"–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞: {guild_data.queue.loop_mode}")
    embed.timestamp = datetime.utcnow()
    
    return embed

class MusicControlView(discord.ui.View):
    """View —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π"""
    
    def __init__(self, guild_id: int):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç
        self.guild_id = guild_id
    
    @discord.ui.button(label="‚è∏Ô∏è", style=discord.ButtonStyle.secondary)
    async def pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        guild_data = get_guild_data(self.guild_id)
        vc = guild_data.voice_client
        
        if not vc:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É", ephemeral=True)
            return
        
        if vc.is_playing():
            vc.pause()
            button.label = "‚ñ∂Ô∏è"
            await interaction.response.edit_message(view=self)
            await interaction.followup.send("‚è∏Ô∏è –ü–∞—É–∑–∞", ephemeral=True)
        elif vc.is_paused():
            vc.resume()
            button.label = "‚è∏Ô∏è"
            await interaction.response.edit_message(view=self)
            await interaction.followup.send("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ù–µ—á–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å", ephemeral=True)
    
    @discord.ui.button(label="‚è≠Ô∏è", style=discord.ButtonStyle.secondary)
    async def skip(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫"""
        guild_data = get_guild_data(self.guild_id)
        vc = guild_data.voice_client
        
        if not vc or not vc.is_playing():
            await interaction.response.send_message("‚ùå –ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å", ephemeral=True)
            return
        
        vc.stop()  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç play_next —á–µ—Ä–µ–∑ after callback
        await interaction.response.send_message("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω", ephemeral=True)
    
    @discord.ui.button(label="‚èπÔ∏è", style=discord.ButtonStyle.danger)
    async def stop(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        guild_data = get_guild_data(self.guild_id)
        vc = guild_data.voice_client
        
        if not vc:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", ephemeral=True)
            return
        
        guild_data.queue.clear()
        vc.stop()
        await vc.disconnect()
        guild_data.voice_client = None
        
        await interaction.response.send_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ", ephemeral=True)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        await interaction.edit_original_response(view=self)
    
    @discord.ui.button(label="üîÄ", style=discord.ButtonStyle.secondary)
    async def shuffle(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        guild_data = get_guild_data(self.guild_id)
        
        if len(guild_data.queue.tracks) < 2:
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è", ephemeral=True)
            return
        
        guild_data.queue.shuffle()
        await interaction.response.send_message("üîÄ –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞", ephemeral=True)
    
    @discord.ui.button(label="üîÅ", style=discord.ButtonStyle.secondary)
    async def loop(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞"""
        guild_data = get_guild_data(self.guild_id)
        
        if guild_data.queue.loop_mode == "none":
            guild_data.queue.loop_mode = "track"
            button.label = "üîÇ"
            mode_text = "üîÇ –ü–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞"
        elif guild_data.queue.loop_mode == "track":
            guild_data.queue.loop_mode = "queue"
            button.label = "üîÅ"
            mode_text = "üîÅ –ü–æ–≤—Ç–æ—Ä –æ—á–µ—Ä–µ–¥–∏"
        else:
            guild_data.queue.loop_mode = "none"
            button.label = "üîÅ"
            mode_text = "‚ñ∂Ô∏è –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞"
        
        await interaction.response.edit_message(view=self)
        await interaction.followup.send(mode_text, ephemeral=True)

async def extract_track_info(url_or_query: str, requester: str) -> tuple[List[Track], bool]:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ(–∞—Ö) –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    
    def extract():
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            if not (url_or_query.startswith("http://") or url_or_query.startswith("https://")):
                # –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                search_query = f"ytsearch1:{url_or_query}"
            else:
                search_query = url_or_query
            
            info = ytdl.extract_info(search_query, download=False)
            return info
        except Exception as e:
            raise e
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_event_loop()
    try:
        info = await loop.run_in_executor(None, extract)
    except yt_dlp.utils.ExtractorError as e:
        error_msg = str(e).lower()
        if "private" in error_msg:
            raise Exception("‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ)")
        elif "region" in error_msg:
            raise Exception("‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
        else:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {str(e)}")
    except Exception as e:
        raise Exception(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    tracks = []
    is_playlist = False
    
    if "entries" in info:
        entries = info["entries"]
        if len(entries) > 1:
            is_playlist = True
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
            if len(entries) > MAX_PLAYLIST_SIZE:
                entries = entries[:MAX_PLAYLIST_SIZE]
        
        for entry in entries:
            if entry:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ entry –Ω–µ None
                track = Track(
                    title=entry.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"),
                    url=entry.get("url", ""),
                    webpage_url=entry.get("webpage_url", ""),
                    duration=entry.get("duration"),
                    thumbnail=entry.get("thumbnail"),
                    uploader=entry.get("uploader"),
                    requester=requester
                )
                tracks.append(track)
    else:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
        track = Track(
            title=info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"),
            url=info.get("url", ""),
            webpage_url=info.get("webpage_url", ""),
            duration=info.get("duration"),
            thumbnail=info.get("thumbnail"),
            uploader=info.get("uploader"),
            requester=requester
        )
        tracks.append(track)
    
    return tracks, is_playlist

def create_source(url: str, volume: float = 0.5):
    """–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫"""
    return discord.FFmpegPCMAudio(
        url,
        before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
        options=f'-vn -filter:a "volume={volume}"'
    )

async def play_next(guild_id: int):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
    guild_data = get_guild_data(guild_id)
    vc = guild_data.voice_client
    
    if not vc:
        return
    
    next_track = guild_data.queue.next()
    if not next_track:
        # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        embed = discord.Embed(
            title="üéµ –û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description="–í—Å–µ —Ç—Ä–µ–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!",
            color=discord.Color.blue()
        )
        
        if guild_data.now_playing_message:
            try:
                await guild_data.now_playing_message.edit(embed=embed, view=None)
            except:
                pass
        return
    
    try:
        source = create_source(next_track.url, guild_data.volume)
        guild_data.start_time = time.time()
        
        def after_track(error):
            if error:
                logging.error(f"Player error: {error}")
            else:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
                asyncio.run_coroutine_threadsafe(play_next(guild_id), bot.loop)
        
        vc.play(source, after=after_track)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ now playing
        embed = create_now_playing_embed(next_track, guild_data)
        view = MusicControlView(guild_id)
        
        if guild_data.now_playing_message:
            try:
                await guild_data.now_playing_message.edit(embed=embed, view=view)
            except:
                guild_data.now_playing_message = None
        
    except Exception as e:
        logging.error(f"Error playing track: {e}")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫ –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        await play_next(guild_id)

@bot.event
async def on_ready():
    print(f"‚úÖ –í–æ—à–ª–∏ –∫–∞–∫ {bot.user}")
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening,
        name="/play | –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç!"
    ))
    try:
        synced = await tree.sync()
        print(f"üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã {len(synced)} –∫–æ–º–∞–Ω–¥(—ã)")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ sync: {e}")

@bot.event
async def on_voice_state_update(member, before, after):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    if member.bot:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –±–æ—Ç–∞
    for vc in bot.voice_clients:
        if vc.guild == member.guild and vc.channel:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ-–±–æ—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
            human_members = [m for m in vc.channel.members if not m.bot]
            
            if len(human_members) == 0:
                # –ë–æ—Ç –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω
                if vc.is_playing():
                    vc.pause()
                    print(f"‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {vc.channel.name} - –±–æ—Ç –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω")
                
                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è
                await asyncio.sleep(60)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                human_members = [m for m in vc.channel.members if not m.bot]
                if len(human_members) == 0:
                    guild_data = get_guild_data(vc.guild.id)
                    guild_data.queue.clear()
                    await vc.disconnect()
                    guild_data.voice_client = None
                    print(f"‚èπÔ∏è –û—Ç–∫–ª—é—á–∏–ª—Å—è –∏–∑ {vc.channel.name} - –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç")
            
            elif len(human_members) > 0 and vc.is_paused():
                # –ö—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                vc.resume()
                print(f"‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {vc.channel.name}")

@tree.command(name="play", description="üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É —Å YouTube")
@app_commands.describe(query="–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
async def play(interaction: discord.Interaction, query: str):
    """–ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏"""
    await interaction.response.defer()
    
    guild_data = get_guild_data(interaction.guild.id)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not guild_data.voice_client:
        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.followup.send("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª!")
            return
        
        try:
            guild_data.voice_client = await interaction.user.voice.channel.connect()
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_embed = discord.Embed(
        title="üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...",
        description=f"–ò—â—É: `{query}`",
        color=discord.Color.orange()
    )
    await interaction.followup.send(embed=processing_embed)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
        tracks, is_playlist = await extract_track_info(query, interaction.user.display_name)
        
        if not tracks:
            await interaction.edit_original_response(
                embed=discord.Embed(title="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", color=discord.Color.red())
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        was_empty = guild_data.queue.is_empty
        
        if is_playlist:
            guild_data.queue.add_multiple(tracks)
            result_embed = discord.Embed(
                title="üìÉ –ü–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!",
                description=f"**{len(tracks)}** —Ç—Ä–µ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
                color=discord.Color.green()
            )
        else:
            guild_data.queue.add(tracks[0])
            result_embed = discord.Embed(
                title="üéµ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!",
                description=f"**{tracks[0].title}**",
                color=discord.Color.green()
            )
            if tracks[0].thumbnail:
                result_embed.set_thumbnail(url=tracks[0].thumbnail)
        
        result_embed.add_field(
            name="üìç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏",
            value=f"{len(guild_data.queue.tracks) - len(tracks) + 1}" if len(guild_data.queue.tracks) > len(tracks) else "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            inline=True
        )
        
        await interaction.edit_original_response(embed=result_embed)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø—É—Å—Ç–∞
        if was_empty and not guild_data.voice_client.is_playing():
            await play_next(interaction.guild.id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è now playing
            if guild_data.queue.current:
                embed = create_now_playing_embed(guild_data.queue.current, guild_data)
                view = MusicControlView(interaction.guild.id)
                guild_data.now_playing_message = await interaction.followup.send(embed=embed, view=view)
    
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=str(e),
            color=discord.Color.red()
        )
        await interaction.edit_original_response(embed=error_embed)

@tree.command(name="queue", description="üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤")
@app_commands.describe(page="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 10 —Ç—Ä–µ–∫–æ–≤)")
async def queue_command(interaction: discord.Interaction, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"""
    guild_data = get_guild_data(interaction.guild.id)
    
    if guild_data.queue.is_empty:
        embed = discord.Embed(
            title="üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/play` —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É!",
            color=discord.Color.blue()
        )
        await interaction.response.send_message(embed=embed)
        return
    
    tracks = guild_data.queue.tracks
    total_pages = (len(tracks) + QUEUE_PAGE_SIZE - 1) // QUEUE_PAGE_SIZE
    
    if total_pages == 0:
        total_pages = 1
    
    if page < 1 or page > total_pages:
        await interaction.response.send_message(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{total_pages}")
        return
    
    start_idx = (page - 1) * QUEUE_PAGE_SIZE
    end_idx = min(start_idx + QUEUE_PAGE_SIZE, len(tracks))
    
    embed = discord.Embed(
        title=f"üìÉ –û—á–µ—Ä–µ–¥—å - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
        color=discord.Color.blue()
    )
    
    # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    if guild_data.queue.current:
        embed.add_field(
            name="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            value=f"**{guild_data.queue.current.title}**\n–ó–∞–ø—Ä–æ—Å–∏–ª: {guild_data.queue.current.requester}",
            inline=False
        )
    
    # –¢—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    if tracks:
        queue_text = ""
        for i in range(start_idx, end_idx):
            track = tracks[i]
            position = i + 1
            duration = f" ({track.duration_str})" if track.duration else ""
            queue_text += f"`{position}.` **{track.title[:40]}{'...' if len(track.title) > 40 else ''}**{duration}\n"
            queue_text += f"     ‚îî {track.requester}\n"
        
        embed.add_field(
            name=f"üìã –°–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏ (–≤—Å–µ–≥–æ: {len(tracks)})",
            value=queue_text or "–ü—É—Å—Ç–æ",
            inline=False
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_duration = sum(t.duration for t in tracks if t.duration)
    if total_duration > 0:
        hours = total_duration // 3600
        minutes = (total_duration % 3600) // 60
        duration_text = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
        embed.set_footer(text=f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text} | –†–µ–∂–∏–º: {guild_data.queue.loop_mode}")
    
    await interaction.response.send_message(embed=embed)

@tree.command(name="nowplaying", description="üéµ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def nowplaying(interaction: discord.Interaction):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
    guild_data = get_guild_data(interaction.guild.id)
    
    if not guild_data.queue.current:
        embed = discord.Embed(
            title="üéµ –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/play` —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É!",
            color=discord.Color.blue()
        )
        await interaction.response.send_message(embed=embed)
        return
    
    embed = create_now_playing_embed(guild_data.queue.current, guild_data)
    view = MusicControlView(interaction.guild.id)
    
    await interaction.response.send_message(embed=embed, view=view)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...
@tree.command(name="stop", description="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
async def stop(interaction: discord.Interaction):
    guild_data = get_guild_data(interaction.guild.id)
    
    if not guild_data.voice_client:
        await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É")
        return
    
    guild_data.queue.clear()
    guild_data.voice_client.stop()
    await guild_data.voice_client.disconnect()
    guild_data.voice_client = None
    
    embed = discord.Embed(
        title="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        description="–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed)

@tree.command(name="skip", description="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def skip(interaction: discord.Interaction):
    guild_data = get_guild_data(interaction.guild.id)
    
    if not guild_data.voice_client or not guild_data.voice_client.is_playing():
        await interaction.response.send_message("‚ùå –ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å")
        return
    
    guild_data.voice_client.stop()
    
    embed = discord.Embed(
        title="‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

if __name__ == "__main__":
    bot.run(TOKEN)
