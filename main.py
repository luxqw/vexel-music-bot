import os
import logging
import discord
import asyncio
import sys
import re
import sqlite3
import json
import time
import threading
from discord.ext import commands
from discord import app_commands
import yt_dlp
from concurrent.futures import ThreadPoolExecutor, as_completed

TOKEN = os.getenv("DISCORD_TOKEN")
MAX_PLAYLIST_SIZE = int(os.getenv("MAX_PLAYLIST_SIZE", "15"))
MAX_QUEUE_SIZE = int(os.getenv("MAX_QUEUE_SIZE", "50"))

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree
queues = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–ª–µ–µ—Ä–∞ –ø–æ –≥–∏–ª—å–¥–∏—è–º
player_messages = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
current_tracks = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–ª–µ–µ—Ä–∞
player_channels = {}

# ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å SQLite
class CacheManager:
    def __init__(self, db_path="/app/cache/bot_cache.db"):
        self.db_path = db_path
        self.memory_cache = {}
        self.cache_lock = threading.RLock()
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS track_cache (
                        key TEXT PRIMARY KEY,
                        data TEXT,
                        created_at INTEGER,
                        expires_at INTEGER
                    )
                ''')
                # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                current_time = int(time.time())
                conn.execute('DELETE FROM track_cache WHERE expires_at < ?', (current_time,))
                conn.commit()
                
            logger.info(f"‚úÖ SQLite –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.db_path}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQLite –∫—ç—à: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–º—è—Ç—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.db_path = None  # –û—Ç–∫–ª—é—á–∞–µ–º SQLite, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–º—è—Ç—å
    
    def get(self, key):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø–∞–º—è—Ç—å, –ø–æ—Ç–æ–º SQLite)"""
        with self.cache_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫—ç—à
            if key in self.memory_cache:
                data, expires_at = self.memory_cache[key]
                if expires_at > time.time():
                    return data
                else:
                    del self.memory_cache[key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.db_path:
                try:
                    with sqlite3.connect(self.db_path) as conn:
                        cursor = conn.execute(
                            'SELECT data, expires_at FROM track_cache WHERE key = ? AND expires_at > ?',
                            (key, int(time.time()))
                        )
                        row = cursor.fetchone()
                        if row:
                            data = json.loads(row[0])
                            expires_at = row[1]
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                            self.memory_cache[key] = (data, expires_at)
                            return data
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQLite –∫—ç—à–∞: {e}")
            
            return None
    
    def set(self, key, data, ttl=3600):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        expires_at = int(time.time()) + ttl
        
        with self.cache_lock:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–≤—Å–µ–≥–¥–∞)
            self.memory_cache[key] = (data, expires_at)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.db_path:
                try:
                    with sqlite3.connect(self.db_path) as conn:
                        conn.execute(
                            'INSERT OR REPLACE INTO track_cache (key, data, created_at, expires_at) VALUES (?, ?, ?, ?)',
                            (key, json.dumps(data), int(time.time()), expires_at)
                        )
                        conn.commit()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ SQLite –∫—ç—à: {e}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        current_time = time.time()
        
        with self.cache_lock:
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –∫—ç—à
            expired_keys = [k for k, (_, exp) in self.memory_cache.items() if exp <= current_time]
            for key in expired_keys:
                del self.memory_cache[key]
            
            # –û—á–∏—â–∞–µ–º SQLite –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.db_path:
                try:
                    with sqlite3.connect(self.db_path) as conn:
                        conn.execute('DELETE FROM track_cache WHERE expires_at < ?', (int(current_time),))
                        conn.commit()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ SQLite –∫—ç—à–∞: {e}")

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("VexelBot")

# –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
try:
    os.makedirs("/app/logs", exist_ok=True)
    file_handler = logging.FileHandler("/app/logs/bot.log")
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logger.addHandler(file_handler)
    logger.info("‚úÖ –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
except Exception as e:
    logger.info(f"‚ÑπÔ∏è –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
cache_manager = CacheManager()

# ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è yt-dlp
class YTDLPPool:
    def __init__(self, max_workers=4):
        self.executor = ThreadPoolExecutor(max_workers=max_workers, thread_name_prefix="YTDLP")
        self.active_tasks = {}
        self.task_lock = threading.Lock()
    
    def submit_task(self, task_id, func, *args, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ø—É–ª —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
        with self.task_lock:
            if task_id in self.active_tasks:
                # –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                return self.active_tasks[task_id]
            
            future = self.executor.submit(func, *args, **kwargs)
            self.active_tasks[task_id] = future
            
            def cleanup_task(fut):
                with self.task_lock:
                    self.active_tasks.pop(task_id, None)
            
            future.add_done_callback(cleanup_task)
            return future
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–ª–∞"""
        self.executor.shutdown(wait=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–ª—è yt-dlp –æ–ø–µ—Ä–∞—Ü–∏–π
ytdl_pool = YTDLPPool(max_workers=6)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É cookies
def get_ytdl_opts(extract_flat=False):
    """–ü–æ–ª—É—á–∏—Ç—å ytdl_opts —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    ytdl_opts = {
        "format": "bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio/best[height<=720]/best",
        "noplaylist": False,
        "quiet": True,
        "no_warnings": True,
        "ignoreerrors": True,
        "extract_flat": extract_flat,
        "writethumbnail": False,
        "writeinfojson": False,
        "logtostderr": False,
        "extractaudio": True,
        "audioformat": "best",
        "outtmpl": "%(extractor)s-%(id)s-%(title)s.%(ext)s",
        "restrictfilenames": True,
        # ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        "socket_timeout": 30,
        "retries": 3,
        "fragment_retries": 3,
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª cookies
    cookies_file = os.getenv("YOUTUBE_COOKIES_FILE")
    if cookies_file and os.path.exists(cookies_file):
        ytdl_opts["cookiefile"] = cookies_file
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ cookies
    browser_cookies = os.getenv("YOUTUBE_BROWSER_COOKIES")
    if browser_cookies and not cookies_file:
        try:
            browser, profile = browser_cookies.split(",", 1)
            ytdl_opts["cookiesfrombrowser"] = (browser.strip(), profile.strip())
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YOUTUBE_BROWSER_COOKIES: {browser_cookies}")
    
    return ytdl_opts

def log_command(user, command):
    logging.info(f"{user} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {command}")

def get_queue(guild_id):
    return queues.setdefault(guild_id, [])

def create_source(url):
    return discord.FFmpegPCMAudio(
        url,
        before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
        options='-vn'
    )

def is_age_restricted_error(error):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å age-restriction"""
    error_str = str(error).lower()
    age_restricted_keywords = [
        "age-restricted",
        "sign in to confirm your age",
        "video is age restricted", 
        "sign in to confirm",
        "login required"
    ]
    return any(keyword in error_str for keyword in age_restricted_keywords)

def clean_search_query(query):
    """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    cleaned = re.sub(r'[^\w\s\-.,!?]', '', query)
    return cleaned.strip()

async def safe_voice_connect(channel, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    for attempt in range(max_retries):
        try:
            logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É {channel.name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
            existing_vc = discord.utils.get(bot.voice_clients, guild=channel.guild)
            if existing_vc:
                if existing_vc.channel == channel:
                    logger.info("‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É")
                    return existing_vc
                else:
                    logger.info("üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª")
                    await existing_vc.move_to(channel)
                    return existing_vc
            
            # –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            vc = await channel.connect(timeout=10.0, reconnect=True)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {channel.name}")
            return vc
            
        except discord.errors.ClientException as e:
            logger.warning(f"‚ö†Ô∏è ClientException –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if "already connected" in str(e).lower():
                existing_vc = discord.utils.get(bot.voice_clients, guild=channel.guild)
                if existing_vc:
                    return existing_vc
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
        
        if attempt < max_retries - 1:
            wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            logger.info(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(wait_time)
    
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

async def safe_voice_disconnect(vc, guild_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    if not vc:
        return
    
    try:
        logger.info("üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if vc.is_playing() or vc.is_paused():
            vc.stop()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await vc.disconnect(force=True)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await cleanup_guild_data(guild_id)

async def cleanup_guild_data(guild_id):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–∏–ª—å–¥–∏–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø–ª–µ–µ—Ä
        await delete_old_player(guild_id)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        player_channels.pop(guild_id, None)
        current_tracks.pop(guild_id, None)
        queues.pop(guild_id, None)
        
        logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≥–∏–ª—å–¥–∏–∏: {e}")

# ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ URL —Å –∫—ç—à–µ–º
async def get_audio_url(track_url, title="Unknown", use_cache=True):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ URL —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"audio_url:{track_url}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if use_cache:
        cached_url = cache_manager.get(cache_key)
        if cached_url:
            logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ URL –¥–ª—è {title}")
            return cached_url
    
    formats_to_try = [
        "bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio",
        "bestaudio/best[height<=720]",
        "best[height<=480]",
        "worst"
    ]
    
    for format_selector in formats_to_try:
        try:
            opts = get_ytdl_opts()
            opts["format"] = format_selector
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            task_id = f"audio_url:{track_url}:{format_selector}"
            future = ytdl_pool.submit_task(task_id, _extract_audio_url, opts, track_url)
            
            audio_url = await asyncio.wrap_future(future)
            
            if audio_url:
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç
                if use_cache:
                    cache_manager.set(cache_key, audio_url, ttl=1800)
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ URL –¥–ª—è {title} —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {format_selector}")
                return audio_url
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {format_selector} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {title}: {str(e)}")
            continue
    
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ URL –¥–ª—è {title} —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏")

def _extract_audio_url(opts, track_url):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ URL –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    ytdl_temp = yt_dlp.YoutubeDL(opts)
    info = ytdl_temp.extract_info(track_url, download=False)
    return info.get("url") if info else None

# ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
class PreloadManager:
    def __init__(self):
        self.active_preloads = {}
        self.preload_lock = asyncio.Lock()
    
    async def preload_tracks(self, guild_id, count=3):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            async with self.preload_lock:
                queue = get_queue(guild_id)
                if not queue:
                    return
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
                tracks_to_preload = []
                for i, track in enumerate(queue[:count]):
                    if (track.get("lazy_load") and not track.get("loaded") 
                        and not track.get("preloading")):
                        tracks_to_preload.append((i, track))
                
                if not tracks_to_preload:
                    return
                
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ {len(tracks_to_preload)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
                tasks = []
                for i, track in tracks_to_preload:
                    track["preloading"] = True
                    task = asyncio.create_task(self._preload_single_track(track, i))
                    tasks.append(task)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                success_count = sum(1 for r in results if r is True)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {success_count}/{len(tracks_to_preload)} —Ç—Ä–µ–∫–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ preload_tracks: {e}")
    
    async def _preload_single_track(self, track, index):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω —Ç—Ä–µ–∫"""
        try:
            logger.info(f"üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ #{index + 1}: {track['title']}")
            
            cache_key = f"track_full:{track['playlist_url']}:{track['playlist_index']}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = cache_manager.get(cache_key)
            if cached_data:
                logger.info(f"üì¶ –¢—Ä–µ–∫ —É–∂–µ –≤ –∫—ç—à–µ: {track['title']}")
                track.update(cached_data)
                track["loaded"] = True
                track["preloading"] = False
                return True
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
            full_info = await self._load_track_metadata(
                track["playlist_url"], 
                track["playlist_index"]
            )
            
            if full_info:
                # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
                cache_manager.set(cache_key, full_info, ttl=3600)
                
                track.update(full_info)
                track["loaded"] = True
                logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω: {track['title']}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ {track['title']}: {e}")
            return False
        finally:
            track["preloading"] = False
    
    async def _load_track_metadata(self, playlist_url, index):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            task_id = f"metadata:{playlist_url}:{index}"
            future = ytdl_pool.submit_task(
                task_id, 
                self._extract_track_metadata, 
                playlist_url, 
                index
            )
            
            return await asyncio.wrap_future(future)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞ {index}: {e}")
            return None
    
    def _extract_track_metadata(self, playlist_url, index):
        """–ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            opts = get_ytdl_opts(extract_flat=False)
            opts["skip_download"] = True
            opts["quiet"] = True
            opts["playliststart"] = index + 1
            opts["playlistend"] = index + 1
            
            ytdl_temp = yt_dlp.YoutubeDL(opts)
            info = ytdl_temp.extract_info(playlist_url, download=False)
            
            if info and "entries" in info and len(info["entries"]) > 0:
                entry = info["entries"][0]
                return {
                    "url": entry.get("url", ""),
                    "webpage_url": entry.get("webpage_url", ""),
                    "thumbnail": entry.get("thumbnail", ""),
                    "title": entry.get("title", "Unknown Track")
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
preload_manager = PreloadManager()

def _extract_info_with_cache(search_query):
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—ç—à–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    cache_key = f"search:{search_query}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_info = cache_manager.get(cache_key)
    if cached_info:
        logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞")
        return cached_info
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–ª–µ–π–ª–∏—Å—Ç —ç—Ç–æ –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
    is_playlist = "list=" in search_query or "playlist" in search_query.lower()
    
    if is_playlist:
        # –î–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        opts = get_ytdl_opts(extract_flat=True)
        opts["playlistend"] = MAX_PLAYLIST_SIZE
        ytdl_temp = yt_dlp.YoutubeDL(opts)
        info = ytdl_temp.extract_info(search_query, download=False)
        
        # –î–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç—Ä–µ–∫–æ–≤ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if info and "entries" in info and info["entries"]:
            logger.info(f"üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö 3 —Ç—Ä–µ–∫–æ–≤")
            opts_full = get_ytdl_opts(extract_flat=False)
            
            for i in range(min(3, len(info["entries"]))):
                entry = info["entries"][i]
                if entry and entry.get("url"):
                    try:
                        opts_full["playliststart"] = i + 1
                        opts_full["playlistend"] = i + 1
                        ytdl_full = yt_dlp.YoutubeDL(opts_full)
                        full_info = ytdl_full.extract_info(search_query, download=False)
                        
                        if full_info and "entries" in full_info and full_info["entries"]:
                            full_entry = full_info["entries"][0]
                            info["entries"][i].update({
                                "url": full_entry.get("url", ""),
                                "webpage_url": full_entry.get("webpage_url", ""),
                                "thumbnail": full_entry.get("thumbnail", ""),
                            })
                            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω: {info['entries'][i].get('title', 'Unknown')}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫ {i}: {e}")
    else:
        # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        opts = get_ytdl_opts(extract_flat=False)
        ytdl_temp = yt_dlp.YoutubeDL(opts)
        info = ytdl_temp.extract_info(search_query, download=False)
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç
    if info:
        cache_manager.set(cache_key, info, ttl=600)
    
    return info

class MusicPlayerView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(emoji="‚è∏Ô∏è", style=discord.ButtonStyle.secondary, custom_id="pause_resume")
    async def pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except Exception:
            return
        
        vc = interaction.guild.voice_client
        if not vc:
            try:
                await interaction.followup.send("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
            except:
                pass
            return
        
        try:
            if vc.is_playing():
                vc.pause()
                await interaction.followup.send("‚è∏Ô∏è –ü–∞—É–∑–∞", ephemeral=True)
            elif vc.is_paused():
                vc.resume()
                await interaction.followup.send("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)
                return
            
            await update_player_buttons(interaction.guild.id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ pause/resume: {e}")
    
    @discord.ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.secondary, custom_id="skip")
    async def skip(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except Exception:
            return
        
        vc = interaction.guild.voice_client
        if not vc or not (vc.is_playing() or vc.is_paused()):
            try:
                await interaction.followup.send("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)
            except:
                pass
            return
        
        try:
            vc.stop()
            await interaction.followup.send("‚è≠Ô∏è –°–∫–∏–ø", ephemeral=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ skip: {e}")
    
    @discord.ui.button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.danger, custom_id="stop")
    async def stop(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except Exception:
            return
        
        vc = interaction.guild.voice_client
        if not vc:
            try:
                await interaction.followup.send("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
            except:
                pass
            return
        
        try:
            await interaction.followup.send("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...", ephemeral=True)
            await safe_voice_disconnect(vc, interaction.guild.id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ stop: {e}")
    
    @discord.ui.button(emoji="üìÉ", style=discord.ButtonStyle.secondary, custom_id="queue")
    async def show_queue(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue = get_queue(interaction.guild.id)
        
        if not queue:
            try:
                await interaction.response.send_message(f"üì≠ **–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞** (0/{MAX_QUEUE_SIZE})", ephemeral=True)
            except:
                pass
            return
        
        embed = discord.Embed(
            title=f"üìÉ –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ ({len(queue)}/{MAX_QUEUE_SIZE})",
            color=0x2f3136
        )
        
        queue_text = ""
        for i, track in enumerate(queue[:10]):
            if track.get("preloading"):
                status_icon = "üöÄ"
            elif track.get("lazy_load") and not track.get("loaded"):
                status_icon = "‚è≥"
            else:
                status_icon = "‚úÖ"
            
            title_display = track['title'][:45] + ('...' if len(track['title']) > 45 else '')
            queue_text += f"`{i+1}.` {status_icon} **{title_display}**\n*–ó–∞–∫–∞–∑–∞–ª: {track['requester']}*\n\n"
        
        if len(queue) > 10:
            queue_text += f"*... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤*"
        
        embed.description = queue_text if queue_text else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
        embed.set_footer(text=f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}/{MAX_QUEUE_SIZE}")
        
        try:
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except:
            pass

def create_player_embed(guild_id):
    """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–ª–µ–µ—Ä–∞"""
    current_track = current_tracks.get(guild_id)
    queue = get_queue(guild_id)
    
    embed = discord.Embed(color=0x2f3136)
    
    if current_track:
        embed.title = "üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç"
        embed.description = f"**{current_track['title']}**"
        
        embed.add_field(
            name="üë§ –ó–∞–∫–∞–∑–∞–ª", 
            value=current_track['requester'], 
            inline=True
        )
        embed.add_field(
            name="üìÉ –í –æ—á–µ—Ä–µ–¥–∏", 
            value=f"{len(queue)}/{MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤", 
            inline=True
        )
        
        guild = bot.get_guild(guild_id)
        vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
        
        if vc:
            if vc.is_playing():
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç", inline=True)
            elif vc.is_paused():
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚è∏Ô∏è –ü–∞—É–∑–∞", inline=True)
            else:
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", inline=True)
        else:
            embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="üîå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", inline=True)
            
        if 'thumbnail' in current_track and current_track['thumbnail']:
            embed.set_thumbnail(url=current_track['thumbnail'])
    else:
        embed.title = "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä"
        embed.description = "*–ì–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é*"
        
        if queue:
            embed.add_field(
                name="üìÉ –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–µ—Ç", 
                value=f"{len(queue)}/{MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤", 
                inline=True
            )
        
        embed.add_field(
            name="üîä –°—Ç–∞—Ç—É—Å", 
            value="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
            inline=True
        )
    
    return embed

async def delete_old_player(guild_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø–ª–µ–µ—Ä–∞"""
    if guild_id in player_messages:
        try:
            await player_messages[guild_id].delete()
        except:
            pass
        player_messages.pop(guild_id, None)

async def update_player_buttons(guild_id):
    """–ë—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–µ—Ä–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è"""
    if guild_id not in player_messages:
        return
    
    try:
        message = player_messages[guild_id]
        view = MusicPlayerView()
        
        guild = bot.get_guild(guild_id)
        vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
        
        for item in view.children:
            if item.custom_id == "pause_resume":
                if vc and vc.is_playing():
                    item.emoji = "‚è∏Ô∏è"
                else:
                    item.emoji = "‚ñ∂Ô∏è"
                break
        
        await message.edit(view=view)
    except:
        pass

async def create_new_player(guild_id, channel):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä"""
    if not channel:
        return
    
    await delete_old_player(guild_id)
    
    embed = create_player_embed(guild_id)
    view = MusicPlayerView()
    
    try:
        player_msg = await channel.send(embed=embed, view=view)
        player_messages[guild_id] = player_msg
        player_channels[guild_id] = channel
        return True
    except Exception:
        return False

# ‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
async def cleanup_cache_periodic():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    while True:
        try:
            await asyncio.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            cache_manager.cleanup()
            logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

@bot.event
async def on_ready():
    logger.info(f"‚úÖ –í–æ—à–ª–∏ –∫–∞–∫ {bot.user}")
    
    cookies_file = os.getenv("YOUTUBE_COOKIES_FILE")
    if cookies_file and os.path.exists(cookies_file):
        logger.info("üîê YouTube cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        logger.info("‚ÑπÔ∏è YouTube cookies –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    logger.info(f"üìä –õ–∏–º–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç–∞: {MAX_PLAYLIST_SIZE} —Ç—Ä–µ–∫–æ–≤")
    logger.info(f"üìä –õ–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏: {MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤")
    logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    
    bot.add_view(MusicPlayerView())
    
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening,
        name="/help"
    ))
    
    # –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(cleanup_cache_periodic())
    
    try:
        synced = await tree.sync()
        logger.info(f"üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã {len(synced)} –∫–æ–º–∞–Ω–¥(—ã)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ sync: {e}")

@bot.event
async def on_voice_state_update(member, before, after):
    if member.bot:
        return

    vc = discord.utils.get(bot.voice_clients, guild=member.guild)

    if vc and vc.channel and len(vc.channel.members) == 1: 
        if vc.is_playing():
            vc.pause() 
            logger.info("‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ.")

        await asyncio.sleep(60)  
        if vc.channel and len(vc.channel.members) == 1:  
            logger.info(f"‚èπÔ∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {vc.channel.name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {member.guild.name}")
            await safe_voice_disconnect(vc, member.guild.id)

@tree.command(name="play", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å YouTube")
@app_commands.describe(query="–°—Å—ã–ª–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å")
async def play(interaction: discord.Interaction, query: str):
    log_command(interaction.user.name, "/play")

    vc = interaction.guild.voice_client
    if not vc:
        if interaction.user.voice and interaction.user.voice.channel:
            try:
                vc = await safe_voice_connect(interaction.user.voice.channel)
            except Exception as e:
                await interaction.response.send_message(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É**\n"
                    f"üí° {str(e)}", 
                    ephemeral=True
                )
                return
        else:
            await interaction.response.send_message("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return

    queue = get_queue(interaction.guild.id)
    
    if len(queue) >= MAX_QUEUE_SIZE:
        await interaction.response.send_message(
            f"‚ùå **–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!** ({len(queue)}/{MAX_QUEUE_SIZE})",
            ephemeral=True
        )
        return

    try:
        await interaction.response.send_message("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", ephemeral=True)
    except Exception:
        return

    search_query = f"ytsearch1:{clean_search_query(query)}" if not (query.startswith("http://") or query.startswith("https://")) else query

    try:
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        
        task_id = f"search:{search_query}"
        future = ytdl_pool.submit_task(task_id, _extract_info_with_cache, search_query)
        info = await asyncio.wrap_future(future)
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç yt-dlp")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {str(e)}")
        try:
            await interaction.edit_original_response(content=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        except:
            pass
        return

    if not info:
        try:
            await interaction.edit_original_response(content="‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ**\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫.")
        except:
            pass
        return

    if "entries" in info and info["entries"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        total_entries = len(info["entries"])
        remaining_slots = MAX_QUEUE_SIZE - len(queue)
        max_to_add = min(MAX_PLAYLIST_SIZE, remaining_slots, total_entries)
        entries_to_process = info["entries"][:max_to_add]
        
        added_count = 0
        for i, entry in enumerate(entries_to_process):
            if entry and entry.get("title"):
                has_full_info = entry.get("url") and entry.get("webpage_url")
                
                track_data = {
                    "title": entry.get("title", f"Track {i+1}"),
                    "playlist_url": search_query,
                    "playlist_index": i,
                    "lazy_load": not has_full_info,
                    "loaded": has_full_info,
                    "preloading": False,
                    "requester": interaction.user.name,
                }
                
                if has_full_info:
                    track_data.update({
                        "url": entry.get("url", ""),
                        "webpage_url": entry.get("webpage_url", ""),
                        "thumbnail": entry.get("thumbnail", ""),
                    })
                
                queue.append(track_data)
                added_count += 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
        lazy_tracks = [track for track in queue if track.get("lazy_load")]
        if lazy_tracks:
            asyncio.create_task(preload_manager.preload_tracks(interaction.guild.id, 3))
        
        try:
            ready_count = sum(1 for track in queue[-added_count:] if track.get("loaded"))
            message = f"üìÉ **–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∏–∑ {total_entries} —Ç—Ä–µ–∫–æ–≤**\n"
            
            if ready_count > 0:
                message += f"‚úÖ {ready_count} —Ç—Ä–µ–∫–æ–≤ –≥–æ—Ç–æ–≤—ã\n"
            if added_count - ready_count > 0:
                message += f"‚è≥ {added_count - ready_count} –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è\n"
            
            message += f"üìä –û—á–µ—Ä–µ–¥—å: {len(queue)}/{MAX_QUEUE_SIZE}"
            
            await interaction.edit_original_response(content=message)
        except:
            pass
            
    elif info.get("title"):
        # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
        track = {
            "title": info["title"],
            "url": info.get("url", ""),
            "webpage_url": info.get("webpage_url", ""),
            "thumbnail": info.get("thumbnail", ""),
            "requester": interaction.user.name,
            "lazy_load": False,
            "loaded": True,
        }
        queue.append(track)
        
        try:
            await interaction.edit_original_response(
                content=f"üé∂ **–î–æ–±–∞–≤–ª–µ–Ω:** {track['title']}\nüìä –û—á–µ—Ä–µ–¥—å: {len(queue)}/{MAX_QUEUE_SIZE}"
            )
        except:
            pass

    player_channels[interaction.guild.id] = interaction.channel
    await create_new_player(interaction.guild.id, interaction.channel)

    if not vc.is_playing():
        await play_next(vc, interaction.guild.id)

async def play_next(vc, guild_id):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
    queue = get_queue(guild_id)
    if not queue:
        current_tracks[guild_id] = None
        logger.info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        channel = player_channels.get(guild_id)
        if channel:
            await create_new_player(guild_id, channel)
        return

    if not vc or not vc.is_connected():
        logger.warning("‚ö†Ô∏è Voice client –æ—Ç–∫–ª—é—á–µ–Ω")
        await cleanup_guild_data(guild_id)
        return

    next_track = queue.pop(0)
    current_tracks[guild_id] = next_track
    logger.info(f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫: {next_track['title']}")
    
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤ —Ñ–æ–Ω–µ
    if queue:
        asyncio.create_task(preload_manager.preload_tracks(guild_id, 3))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if next_track.get("lazy_load") and not next_track.get("loaded"):
        try:
            cache_key = f"track_full:{next_track['playlist_url']}:{next_track['playlist_index']}"
            
            cached_data = cache_manager.get(cache_key)
            if cached_data:
                next_track.update(cached_data)
                next_track["loaded"] = True
            else:
                full_info = await preload_manager._load_track_metadata(
                    next_track["playlist_url"], 
                    next_track["playlist_index"]
                )
                
                if full_info:
                    cache_manager.set(cache_key, full_info, ttl=3600)
                    next_track.update(full_info)
                    next_track["loaded"] = True
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
            await play_next(vc, guild_id)
            return
    
    try:
        if next_track.get("url"):
            audio_url = await get_audio_url(next_track["url"], next_track["title"])
        else:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è —Ç—Ä–µ–∫–∞: {next_track['title']}")
            await play_next(vc, guild_id)
            return
        
        source = create_source(audio_url)
        
        def after_play(error):
            if error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}")
            
            if vc and vc.is_connected():
                bot.loop.create_task(play_next(vc, guild_id))
            else:
                bot.loop.create_task(cleanup_guild_data(guild_id))
        
        vc.play(source, after=after_play)
        logger.info(f"üéµ –ò–≥—Ä–∞–µ—Ç: {next_track['title']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        await play_next(vc, guild_id)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
    channel = player_channels.get(guild_id)
    if channel:
        await create_new_player(guild_id, channel)

@tree.command(name="pause", description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def pause(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_playing():
        vc.pause()
        await interaction.response.send_message("‚è∏Ô∏è –ü–∞—É–∑–∞", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)

@tree.command(name="resume", description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
async def resume(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_paused():
        vc.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ", ephemeral=True)

@tree.command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
async def stop(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc:
        await interaction.response.send_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...", ephemeral=True)
        await safe_voice_disconnect(vc, interaction.guild.id)
    else:
        await interaction.response.send_message("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", ephemeral=True)

@tree.command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫")
async def skip(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and (vc.is_playing() or vc.is_paused()):
        vc.stop()
        await interaction.response.send_message("‚è≠Ô∏è –°–∫–∏–ø", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)

@tree.command(name="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def queue_cmd(interaction: discord.Interaction):
    queue = get_queue(interaction.guild.id)
    
    if not queue:
        await interaction.response.send_message(f"üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ (0/{MAX_QUEUE_SIZE})", ephemeral=True)
        return
    
    embed = discord.Embed(title=f"üìÉ –û—á–µ—Ä–µ–¥—å ({len(queue)}/{MAX_QUEUE_SIZE})", color=0x2f3136)
    
    queue_text = ""
    for i, track in enumerate(queue[:10]):
        status_icon = "üöÄ" if track.get("preloading") else ("‚è≥" if track.get("lazy_load") and not track.get("loaded") else "‚úÖ")
        title = track['title'][:40] + ('...' if len(track['title']) > 40 else '')
        queue_text += f"`{i+1}.` {status_icon} **{title}**\n"
    
    if len(queue) > 10:
        queue_text += f"*... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤*"
    
    embed.description = queue_text
    await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="help", description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
async def help_cmd(interaction: discord.Interaction):
    embed = discord.Embed(title="üìñ –ö–æ–º–∞–Ω–¥—ã", color=0x2f3136)
    embed.add_field(
        name="üéµ –ö–æ–º–∞–Ω–¥—ã",
        value="`/play` - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏\n`/pause` - –ü–∞—É–∑–∞\n`/resume` - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n`/skip` - –°–∫–∏–ø\n`/stop` - –°—Ç–æ–ø\n`/queue` - –û—á–µ—Ä–µ–¥—å",
        inline=False
    )
    embed.add_field(
        name="‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
        value=f"‚Ä¢ –õ–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏: {MAX_QUEUE_SIZE}\n‚Ä¢ –õ–∏–º–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç–∞: {MAX_PLAYLIST_SIZE}\n‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤\n‚Ä¢ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞",
        inline=False
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not TOKEN:
        logger.error("‚ùå DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    try:
        bot.run(TOKEN)
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
