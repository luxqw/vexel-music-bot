import os
import logging
import discord
import asyncio
from discord.ext import commands
from discord import app_commands
import yt_dlp

TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree
queues = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–ª–µ–µ—Ä–æ–≤ –ø–æ –≥–∏–ª—å–¥–∏—è–º
player_channels = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
current_tracks = {}

logging.basicConfig(filename="bot.log", level=logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É cookies
def get_ytdl_opts():
    """–ü–æ–ª—É—á–∏—Ç—å ytdl_opts —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies"""
    ytdl_opts = {
        "format": "bestaudio",
        "noplaylist": False,
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª cookies
    cookies_file = os.getenv("YOUTUBE_COOKIES_FILE")
    if cookies_file and os.path.exists(cookies_file):
        ytdl_opts["cookiefile"] = cookies_file
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º YouTube cookies: {cookies_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ cookies
    browser_cookies = os.getenv("YOUTUBE_BROWSER_COOKIES")
    if browser_cookies and not cookies_file:
        try:
            browser, profile = browser_cookies.split(",", 1)
            ytdl_opts["cookiesfrombrowser"] = (browser.strip(), profile.strip())
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –±—Ä–∞—É–∑–µ—Ä–∞: {browser} ({profile})")
        except ValueError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YOUTUBE_BROWSER_COOKIES: {browser_cookies}")
    
    return ytdl_opts

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ytdl —Å cookies
ytdl_opts = get_ytdl_opts()
ytdl = yt_dlp.YoutubeDL(ytdl_opts)

def log_command(user, command):
    logging.info(f"{user} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {command}")

def get_queue(guild_id):
    return queues.setdefault(guild_id, [])

def create_source(url):
    return discord.FFmpegPCMAudio(
        url,
        before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
        options='-vn'
    )

def is_age_restricted_error(error):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å age-restriction"""
    error_str = str(error).lower()
    age_restricted_keywords = [
        "age-restricted",
        "sign in to confirm your age",
        "video is age restricted", 
        "sign in to confirm",
        "login required"
    ]
    return any(keyword in error_str for keyword in age_restricted_keywords)

class MusicPlayerView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(emoji="‚è∏Ô∏è", style=discord.ButtonStyle.secondary, custom_id="pause_resume")
    async def pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if not vc:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
            return
        
        if vc.is_playing():
            vc.pause()
            await interaction.response.send_message("‚è∏Ô∏è –ü–∞—É–∑–∞", ephemeral=True)
        elif vc.is_paused():
            vc.resume()
            await interaction.response.send_message("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await create_new_player(interaction.guild.id)
    
    @discord.ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.secondary, custom_id="skip")
    async def skip(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if not vc or not vc.is_playing():
            await interaction.response.send_message("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)
            return
        
        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç—Å—è –≤ –ø–ª–µ–µ—Ä–µ
        await interaction.response.defer(ephemeral=True)
        vc.stop()
    
    @discord.ui.button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.danger, custom_id="stop")
    async def stop(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if not vc:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", ephemeral=True)
            return
        
        vc.stop()
        await vc.disconnect()
        queues[interaction.guild.id] = []
        current_tracks[interaction.guild.id] = None
        
        await interaction.response.send_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", ephemeral=True)
        await create_new_player(interaction.guild.id)
    
    @discord.ui.button(emoji="üìÉ", style=discord.ButtonStyle.secondary, custom_id="queue")
    async def show_queue(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue = get_queue(interaction.guild.id)
        
        if not queue:
            await interaction.response.send_message("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", ephemeral=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏
        embed = discord.Embed(
            title="üìÉ –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤",
            color=0x2f3136
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–µ–∫–æ–≤
        queue_text = ""
        for i, track in enumerate(queue[:10]):
            queue_text += f"`{i+1}.` **{track['title'][:40]}{'...' if len(track['title']) > 40 else ''}**\n*{track['requester']}*\n\n"
        
        if len(queue) > 10:
            queue_text += f"*... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤*"
        
        embed.description = queue_text if queue_text else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
        embed.set_footer(text=f"–í—Å–µ–≥–æ: {len(queue)} —Ç—Ä–µ–∫–æ–≤")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

def create_player_embed(guild_id):
    """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–ª–µ–µ—Ä–∞"""
    current_track = current_tracks.get(guild_id)
    queue = get_queue(guild_id)
    
    embed = discord.Embed(color=0x2f3136)
    
    if current_track:
        embed.title = "üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç"
        embed.description = f"**{current_track['title']}**"
        
        embed.add_field(
            name="üë§ –ó–∞–∫–∞–∑–∞–ª", 
            value=current_track['requester'], 
            inline=True
        )
        embed.add_field(
            name="üìÉ –í –æ—á–µ—Ä–µ–¥–∏", 
            value=f"{len(queue)}", 
            inline=True
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        guild = bot.get_guild(guild_id)
        vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
        
        if vc:
            if vc.is_playing():
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç", inline=True)
            elif vc.is_paused():
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚è∏Ô∏è –ü–∞—É–∑–∞", inline=True)
            else:
                embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", inline=True)
        else:
            embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value="üîå –û—Ç–∫–ª—é—á–µ–Ω", inline=True)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
        if 'thumbnail' in current_track and current_track['thumbnail']:
            embed.set_thumbnail(url=current_track['thumbnail'])
    else:
        embed.title = "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä"
        embed.description = "*–ì–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é*"
        
        if queue:
            embed.add_field(
                name="üìÉ –í –æ—á–µ—Ä–µ–¥–∏", 
                value=f"{len(queue)}", 
                inline=True
            )
            embed.add_field(
                name="üîä –°—Ç–∞—Ç—É—Å", 
                value="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                inline=True
            )
        else:
            embed.add_field(
                name="üîä –°—Ç–∞—Ç—É—Å", 
                value="‚èπÔ∏è –ü—É—Å—Ç–æ", 
                inline=True
            )
    
    return embed

async def create_new_player(guild_id):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä –≤ –∫–æ–Ω—Ü–µ —á–∞—Ç–∞"""
    if guild_id not in player_channels:
        return
    
    channel = player_channels[guild_id]
    if not channel:
        return
    
    try:
        embed = create_player_embed(guild_id)
        view = MusicPlayerView()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        guild = bot.get_guild(guild_id)
        vc = discord.utils.get(bot.voice_clients, guild=guild) if guild else None
        
        for item in view.children:
            if item.custom_id == "pause_resume":
                if vc and vc.is_playing():
                    item.emoji = "‚è∏Ô∏è"
                else:
                    item.emoji = "‚ñ∂Ô∏è"
                break
        
        await channel.send(embed=embed, view=view)
        
    except discord.HTTPException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–µ—Ä–∞: {e}")

@bot.event
async def on_ready():
    print(f"‚úÖ –í–æ—à–ª–∏ –∫–∞–∫ {bot.user}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cookies_file = os.getenv("YOUTUBE_COOKIES_FILE")
    browser_cookies = os.getenv("YOUTUBE_BROWSER_COOKIES")
    
    if cookies_file and os.path.exists(cookies_file):
        print("üîê YouTube cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (—Ñ–∞–π–ª)")
    elif browser_cookies:
        print("üîê YouTube cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–±—Ä–∞—É–∑–µ—Ä)")
    else:
        print("‚ÑπÔ∏è YouTube cookies –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º persistent view
    bot.add_view(MusicPlayerView())
    
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType
